#!/usr/bin/env python

import warnings
import os.path as op
from argparse import ArgumentParser


with warnings.catch_warnings():
    warnings.simplefilter("ignore")

    print("Loading AFQ libraries...")

    import AFQ
    import AFQ.utils.bin as afb

    import logging
    logger = logging.getLogger('AFQ')
    logger.setLevel(level=logging.INFO)

usage = \
    """pyAFQ /path/to/afq_config.toml

Runs full AFQ processing as specified in the configuration file.

For details about configuration, see instructions in:
https://yeatmanlab.github.io/pyAFQ/usage/config.html

The default configuration file looks like:

"""


def parse_cli(arg_dict):
    cli_parser = ArgumentParser(usage=usage + afb.dict_to_toml(arg_dict))

    cli_parser.add_argument(
        dest='config',
        action="store",
        help="Path to config file or folder. "
        + "For example, /path/to/afq_config.toml")

    cli_parser.add_argument(
        '-g',
        '--generate-config-only',
        dest='generate_toml',
        action="store_true",
        default=False,
        help="Generate a default config file at the path"
        + " specified without running pyAFQ.")

    cli_parser.add_argument(
        '-q',
        '--generate-qsiprep-json-only',
        dest='generate_json',
        action="store_true",
        default=False,
        help="Generate two default json files at the path"
        + " (which should be a folder) specified without running pyAFQ;"
        + " this json can be used to define a recon workflow in qsiprep.")

    cli_parser.add_argument(
        '-o',
        '--overwrite-config',
        dest='overwrite',
        action="store_true",
        default=False,
        help="Overwrite config file at the path"
        + " with current arguments and comments,"
        + " preserving previous defaults when applicable.")

    cli_parser.add_argument(
        '-v',
        '--verbose',
        dest='verbose',
        action="store_true",
        default=False,
        help="Verbose when reading TOML file")

    cli_parser.add_argument(
        '-d',
        '--dry-run',
        dest='dry_run',
        action="store_true",
        default=False,
        help="Perform a dry run - prints recognized"
        + " arguments without running pyAFQ")

    cli_parser.add_argument(
        '-c',
        '--call',
        dest='to_call',
        default="all",
        help="AFQ.api attribute to get using the specified config file."
        + " Defaults to 'all', which will perform the entire"
        + " tractometry pipeline.")

    cli_parser.add_argument(
        '-t', '--notrack', action="store_true", default=False,
        help="Disable the use of pyAFQ being recorded by Google Analytics. ")

    opts = cli_parser.parse_args()

    if not opts.notrack:
        logger.info(
            "Your use of pyAFQ is being recorded using Google Analytics. "
            "For more information, please refer to the pyAFQ documentation: "
            "https://yeatmanlab.github.io/pyAFQ/usage.html#usage-tracking-with-google-analytics. "  # noqa
            "To turn this off, use the `--notrack` "
            "flag when using the pyAFQ CLI")
        import popylar
        popylar.track_event(AFQ._ga_id, "pyAFQ_cli", "CLI called")

    return opts.config, opts.generate_toml, opts.overwrite,\
        opts.verbose, opts.dry_run, opts.to_call, opts.generate_json


def download_templates():
    from AFQ.data.fetch import (
        read_templates,
        read_pediatric_templates,
        read_callosum_templates,
        read_cp_templates,
        read_or_templates,
        read_ar_templates,
        download_hypvinn,
        read_mni_template)

    read_templates()
    read_pediatric_templates()
    read_callosum_templates()
    read_cp_templates()
    read_or_templates()
    read_ar_templates()
    download_hypvinn()
    read_mni_template(weight="T1w")
    read_mni_template(weight="T2w")


if __name__ == '__main__':
    arg_dict = afb.func_dict_to_arg_dict(logger=logger)
    config_file, generate_only, overwrite, verbose,\
        dry_run, to_call, generate_json =\
            parse_cli(arg_dict)
    
    if config_file == "download":
        logger.info("Downloading templates...")
        download_templates()
        exit()

    if generate_only and generate_json:
        raise ValueError("Can only generate .toml or .json; not both")
    if generate_json:
        if not op.isdir(config_file):
            raise ValueError(
                "Config must be a folder when generating a .json")
    else:
        if config_file[-5:] != ".toml":
            raise ValueError(
                "Config file must be .toml unless generating a .json")

    if generate_only:
        afb.generate_config(
            config_file, arg_dict, overwrite, logger=logger)
    elif generate_json:
        afb.generate_json(
            config_file, overwrite, logger=logger)
    else:
        afb.parse_config_run_afq(
            config_file,
            arg_dict,
            to_call=to_call,
            overwrite=overwrite,
            verbose=verbose,
            dry_run=dry_run,
            logger=logger)
