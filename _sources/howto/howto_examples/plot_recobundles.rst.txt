
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "howto/howto_examples/plot_recobundles.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_howto_howto_examples_plot_recobundles.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_howto_howto_examples_plot_recobundles.py:


=========================================
Plotting tract profiles using RecoBundles
=========================================

An example of tracking and segmenting two tracts with RecoBundles
[Garyfallidis2017]_, and plotting their tract profiles for FA (calculated with
DTI).

See `plot_tract_profile` for explanations of each stage here. The main
difference here is that segmentation uses the RecoBundles algorithm, instead of
the AFQ waypoint ROI approach.

.. GENERATED FROM PYTHON SOURCE LINES 15-179

.. code-block:: default


    import os.path as op
    import matplotlib.pyplot as plt
    import numpy as np
    import nibabel as nib
    import dipy.data as dpd
    from dipy.data import fetcher
    import dipy.tracking.utils as dtu
    import dipy.tracking.streamline as dts
    from dipy.io.streamline import save_tractogram, load_tractogram
    from dipy.stats.analysis import afq_profile, gaussian_weights
    from dipy.io.stateful_tractogram import StatefulTractogram
    from dipy.io.stateful_tractogram import Space
    from dipy.align import affine_registration


    import AFQ.data.fetch as afd
    import AFQ.tractography.tractography as aft
    import AFQ.registration as reg
    import AFQ.models.dti as dti
    import AFQ.segmentation as seg
    import AFQ.api.bundle_dict as abd

    # Target directory for this example's output files
    working_dir = "./recobundles"

    dpd.fetch_stanford_hardi()

    hardi_dir = op.join(fetcher.dipy_home, "stanford_hardi")
    hardi_fdata = op.join(hardi_dir, "HARDI150.nii.gz")
    hardi_fbval = op.join(hardi_dir, "HARDI150.bval")
    hardi_fbvec = op.join(hardi_dir, "HARDI150.bvec")

    img = nib.load(hardi_fdata)

    print("Calculating DTI...")
    if not op.exists(op.join(working_dir, 'dti_FA.nii.gz')):
        dti_params = dti.fit_dti(hardi_fdata, hardi_fbval, hardi_fbvec,
                                 out_dir=working_dir)
    else:
        dti_params = {'FA': op.join(working_dir, 'dti_FA.nii.gz'),
                      'params': op.join(working_dir, 'dti_params.nii.gz')}

    FA_img = nib.load(dti_params['FA'])
    FA_data = FA_img.get_fdata()

    print("Registering to template...")
    MNI_T2_img = afd.read_mni_template()

    if not op.exists(op.join(working_dir, 'mapping.nii.gz')):
        import dipy.core.gradients as dpg
        gtab = dpg.gradient_table(hardi_fbval, hardi_fbvec)
        b0 = np.mean(img.get_fdata()[..., gtab.b0s_mask], -1)
        # Prealign using affine registration
        _, prealign = affine_registration(
            b0,
            MNI_T2_img.get_fdata(),
            img.affine,
            MNI_T2_img.affine)

        # Then register using a non-linear registration using the affine for
        # prealignment
        warped_hardi, mapping = reg.syn_register_dwi(hardi_fdata, gtab,
                                                     prealign=prealign)
        reg.write_mapping(mapping, op.join(working_dir, 'mapping.nii.gz'))
    else:
        mapping = reg.read_mapping(op.join(working_dir, 'mapping.nii.gz'),
                                   img, MNI_T2_img)


    bundle_names = [
        "CST_L", "CST_R", "UF_L", "UF_R",
        "CC_ForcepsMajor", "CC_ForcepsMinor",
        "OR_L", "OR_R", "VOF_L", "VOF_R"]
    bundles = abd.BundleDict(bundle_names, seg_algo="reco80")

    print("Tracking...")
    if not op.exists(op.join(working_dir, 'dti_streamlines_reco.trk')):
        seed_roi = np.zeros(img.shape[:-1])
        for bundle in bundles:
            if bundle != 'whole_brain':
                sl_xform = dts.Streamlines(
                    dtu.transform_tracking_output(bundles[bundle]['sl'],
                                                  MNI_T2_img.affine))

                delta = dts.values_from_volume(mapping.backward,
                                               sl_xform, np.eye(4))
                sl_xform = [sum(d, s) for d, s in zip(delta, sl_xform)]

                sl_xform = dts.Streamlines(
                    dtu.transform_tracking_output(
                        sl_xform,
                        np.linalg.inv(MNI_T2_img.affine)))

                sft = StatefulTractogram(sl_xform, img, Space.RASMM)
                save_tractogram(sft, op.join(working_dir, f'{bundle}_atlas.trk'))

                sl_xform = dts.Streamlines(
                    dtu.transform_tracking_output(
                        sl_xform,
                        np.linalg.inv(img.affine)))

                for sl in sl_xform:
                    sl_as_idx = sl.astype(int)
                    seed_roi[sl_as_idx[:, 0],
                             sl_as_idx[:, 1],
                             sl_as_idx[:, 2]] = 1

        nib.save(nib.Nifti1Image(seed_roi, img.affine),
                 op.join(working_dir, 'seed_roi.nii.gz'))
        sft = aft.track(dti_params['params'], seed_mask=seed_roi,
                        directions='det', stop_mask=FA_data,
                        stop_threshold=0.1, odf_model="dti",
                        n_seeds=10000, random_seeds=True,
                        rng_seed=42)
        print(len(sft.streamlines))
        save_tractogram(sft, op.join(working_dir, 'dti_streamlines_reco.trk'),
                        bbox_valid_check=False)
    else:
        sft = load_tractogram(op.join(working_dir, 'dti_streamlines_reco.trk'),
                              img)

    print("Segmenting fiber groups...")
    segmentation = seg.Segmentation(seg_algo='reco80',
                                    rng=np.random.RandomState(2))

    segmentation.segment(bundles,
                         sft,
                         fdata=hardi_fdata,
                         fbval=hardi_fbval,
                         fbvec=hardi_fbvec,
                         mapping=mapping,
                         reg_template=MNI_T2_img)

    fiber_groups = segmentation.fiber_groups

    for kk in fiber_groups:
        print(kk, len(fiber_groups[kk]))
        sft = StatefulTractogram(fiber_groups[kk].streamlines,
                                 img,
                                 Space.RASMM)
        save_tractogram(sft, op.join(working_dir, '%s_reco.trk' % kk),
                        bbox_valid_check=False)


    print("Extracting tract profiles...")
    for bundle in bundles:
        if bundle != 'whole_brain':

            fig, ax = plt.subplots(1)
            sft = load_tractogram(
                op.join(working_dir, f'{bundle}_reco.trk'),
                img,
                to_space=Space.VOX,
                bbox_valid_check=False)
            weights = gaussian_weights(sft.streamlines)
            profile = afq_profile(FA_data, sft.streamlines,
                                  np.eye(4), weights=weights)

            ax.plot(profile)
            ax.set_title(bundle)

    plt.show()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /howto/howto_examples/images/sphx_glr_plot_recobundles_001.png
         :alt: CST_L
         :srcset: /howto/howto_examples/images/sphx_glr_plot_recobundles_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /howto/howto_examples/images/sphx_glr_plot_recobundles_002.png
         :alt: CST_R
         :srcset: /howto/howto_examples/images/sphx_glr_plot_recobundles_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /howto/howto_examples/images/sphx_glr_plot_recobundles_003.png
         :alt: UF_L
         :srcset: /howto/howto_examples/images/sphx_glr_plot_recobundles_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /howto/howto_examples/images/sphx_glr_plot_recobundles_004.png
         :alt: UF_R
         :srcset: /howto/howto_examples/images/sphx_glr_plot_recobundles_004.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /howto/howto_examples/images/sphx_glr_plot_recobundles_005.png
         :alt: CC_ForcepsMajor
         :srcset: /howto/howto_examples/images/sphx_glr_plot_recobundles_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /howto/howto_examples/images/sphx_glr_plot_recobundles_006.png
         :alt: CC_ForcepsMinor
         :srcset: /howto/howto_examples/images/sphx_glr_plot_recobundles_006.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /howto/howto_examples/images/sphx_glr_plot_recobundles_007.png
         :alt: OR_L
         :srcset: /howto/howto_examples/images/sphx_glr_plot_recobundles_007.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /howto/howto_examples/images/sphx_glr_plot_recobundles_008.png
         :alt: OR_R
         :srcset: /howto/howto_examples/images/sphx_glr_plot_recobundles_008.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /howto/howto_examples/images/sphx_glr_plot_recobundles_009.png
         :alt: VOF_L
         :srcset: /howto/howto_examples/images/sphx_glr_plot_recobundles_009.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /howto/howto_examples/images/sphx_glr_plot_recobundles_010.png
         :alt: VOF_R
         :srcset: /howto/howto_examples/images/sphx_glr_plot_recobundles_010.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Calculating DTI...
    Registering to template...
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
    Tracking...
      0%|          | 0/19503 [00:00<?, ? MB/s]      0%|          | 4/19503 [00:00<11:17, 28.77 MB/s]      0%|          | 17/19503 [00:00<04:55, 66.02 MB/s]      0%|          | 69/19503 [00:00<01:35, 203.86 MB/s]      1%|▏         | 277/19503 [00:00<00:27, 703.21 MB/s]      3%|▎         | 650/19503 [00:00<00:13, 1396.94 MB/s]      5%|▌         | 1016/19503 [00:00<00:10, 1797.22 MB/s]      7%|▋         | 1389/19503 [00:00<00:08, 2066.31 MB/s]      9%|▉         | 1754/19503 [00:01<00:07, 2232.30 MB/s]     10%|█         | 2027/19503 [00:01<00:08, 2069.29 MB/s]     12%|█▏        | 2336/19503 [00:01<00:08, 2100.19 MB/s]     14%|█▍        | 2709/19503 [00:01<00:07, 2261.30 MB/s]     16%|█▌        | 3078/19503 [00:01<00:07, 2317.58 MB/s]     18%|█▊        | 3446/19503 [00:01<00:06, 2473.42 MB/s]     19%|█▉        | 3735/19503 [00:01<00:06, 2571.18 MB/s]     21%|██        | 3999/19503 [00:02<00:06, 2417.36 MB/s]     22%|██▏       | 4364/19503 [00:02<00:05, 2530.16 MB/s]     24%|██▍       | 4704/19503 [00:02<00:05, 2743.92 MB/s]     26%|██▌       | 4984/19503 [00:02<00:05, 2521.54 MB/s]     27%|██▋       | 5277/19503 [00:02<00:05, 2459.15 MB/s]     29%|██▊       | 5560/19503 [00:02<00:06, 2209.17 MB/s]     30%|███       | 5919/19503 [00:02<00:05, 2300.89 MB/s]     32%|███▏      | 6285/19503 [00:03<00:05, 2380.56 MB/s]     34%|███▍      | 6642/19503 [00:03<00:05, 2419.08 MB/s]     36%|███▌      | 7003/19503 [00:03<00:05, 2449.83 MB/s]     38%|███▊      | 7373/19503 [00:03<00:04, 2497.00 MB/s]     40%|███▉      | 7734/19503 [00:03<00:04, 2563.00 MB/s]     41%|████      | 7992/19503 [00:03<00:04, 2555.86 MB/s]     42%|████▏     | 8286/19503 [00:03<00:04, 2579.45 MB/s]     44%|████▍     | 8545/19503 [00:03<00:04, 2547.43 MB/s]     45%|████▌     | 8835/19503 [00:04<00:04, 2588.45 MB/s]     47%|████▋     | 9095/19503 [00:04<00:04, 2545.91 MB/s]     48%|████▊     | 9373/19503 [00:04<00:03, 2562.99 MB/s]     49%|████▉     | 9630/19503 [00:04<00:03, 2548.09 MB/s]     51%|█████     | 9930/19503 [00:04<00:03, 2600.93 MB/s]     52%|█████▏    | 10190/19503 [00:04<00:03, 2561.19 MB/s]     54%|█████▍    | 10488/19503 [00:04<00:03, 2626.70 MB/s]     55%|█████▌    | 10751/19503 [00:04<00:03, 2564.31 MB/s]     57%|█████▋    | 11043/19503 [00:04<00:03, 2634.67 MB/s]     58%|█████▊    | 11307/19503 [00:04<00:03, 2551.50 MB/s]     59%|█████▉    | 11603/19503 [00:05<00:02, 2661.74 MB/s]     61%|██████    | 11871/19503 [00:05<00:03, 2532.49 MB/s]     63%|██████▎   | 12190/19503 [00:05<00:02, 2593.22 MB/s]     64%|██████▍   | 12451/19503 [00:05<00:02, 2583.48 MB/s]     65%|██████▌   | 12742/19503 [00:05<00:02, 2532.19 MB/s]     67%|██████▋   | 13027/19503 [00:05<00:02, 2607.46 MB/s]     68%|██████▊   | 13301/19503 [00:05<00:02, 2564.39 MB/s]     70%|██████▉   | 13566/19503 [00:05<00:02, 2565.93 MB/s]     71%|███████   | 13824/19503 [00:06<00:04, 1147.59 MB/s]     73%|███████▎  | 14157/19503 [00:06<00:03, 1394.27 MB/s]     74%|███████▍  | 14512/19503 [00:06<00:03, 1642.04 MB/s]     76%|███████▌  | 14868/19503 [00:06<00:02, 1905.47 MB/s]     78%|███████▊  | 15212/19503 [00:06<00:01, 2214.93 MB/s]     79%|███████▉  | 15482/19503 [00:07<00:01, 2104.95 MB/s]     81%|████████  | 15802/19503 [00:07<00:01, 2242.04 MB/s]     83%|████████▎ | 16093/19503 [00:07<00:01, 2396.95 MB/s]     84%|████████▍ | 16359/19503 [00:07<00:01, 2369.59 MB/s]     85%|████████▌ | 16657/19503 [00:07<00:01, 2525.79 MB/s]     87%|████████▋ | 16924/19503 [00:07<00:01, 2457.30 MB/s]     88%|████████▊ | 17219/19503 [00:07<00:00, 2589.03 MB/s]     90%|████████▉ | 17487/19503 [00:07<00:00, 2532.38 MB/s]     91%|█████████ | 17746/19503 [00:07<00:00, 2539.68 MB/s]     92%|█████████▏| 18025/19503 [00:08<00:00, 2546.43 MB/s]     94%|█████████▎| 18283/19503 [00:08<00:00, 2530.98 MB/s]     95%|█████████▌| 18556/19503 [00:08<00:00, 2503.23 MB/s]     97%|█████████▋| 18837/19503 [00:08<00:00, 2587.77 MB/s]     98%|█████████▊| 19121/19503 [00:08<00:00, 2560.03 MB/s]    100%|█████████▉| 19410/19503 [00:08<00:00, 2646.71 MB/s]    100%|██████████| 19503/19503 [00:08<00:00, 2271.68 MB/s]
    6018
    Segmenting fiber groups...
    CST_L 63
    CST_R 64
    UF_L 11
    UF_R 1
    CC_ForcepsMajor 131
    CC_ForcepsMinor 376
    OR_L 4
    OR_R 4
    VOF_L 58
    VOF_R 44
    Extracting tract profiles...




.. GENERATED FROM PYTHON SOURCE LINES 180-188

References:
-------------------------
 .. [Garyfallidis2017] Garyfallidis, Eleftherios, Marc-Alexandre Côté,
                     Francois Rheault, Jasmeen Sidhu, Janice Hau, Laurent
                     Petit, David Fortin, Stephen Cunanne, and Maxime
                     Descoteaux. 2017.“Recognition of White Matter Bundles
                     Using Local and Global Streamline-Based Registration and
                     Clustering.”NeuroImage 170: 283-295.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (16 minutes 45.952 seconds)

**Estimated memory usage:**  4785 MB


.. _sphx_glr_download_howto_howto_examples_plot_recobundles.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_recobundles.py <plot_recobundles.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_recobundles.ipynb <plot_recobundles.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
