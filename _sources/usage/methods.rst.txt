
.. _methods_docs:

The pyAFQ API methods
---------------------
After defining your pyAFQ API object, you can ask for the output of
any step of the pipeline. It is common for users to just call export_all
(for example, `myafq.export_all()`). However, if the user only wants the
tractography, the user can instead call `myafq.export_streamlines()`. Here
is a list of all of pyAFQ's possible outputs:



def  export_data(self):
    DWI data as an ndarray for selected b values


def  export_gtab(self):
    A DIPY GradientTable with all the gradient information


def  export_img(self):
    unaltered DWI data in a Nifti1Image.


def  export_b0(self):
    full path to a nifti file containing the mean b0


def  export_masked_b0(self):
    full path to a nifti file containing the mean b0 after applying the brain mask


def  export_dti_tf(self):
    DTI TensorFit object


def  export_dti_params(self):
    full path to a nifti file containing parameters for the DTI fit


def  export_dki_tf(self):
    DKI DiffusionKurtosisFit object


def  export_dki_params(self):
    full path to a nifti file containing parameters for the DKI fit


def  export_csd_params(self):
    full path to a nifti file containing parameters for the CSD fit


def  export_pmap(self):
    full path to a nifti file containing the anisotropic power map


def  export_dti_fa(self):
    full path to a nifti file containing the DTI fractional anisotropy


def  export_dti_cfa(self):
    full path to a nifti file containing the DTI color fractional anisotropy


def  export_dti_pdd(self):
    full path to a nifti file containing the DTI principal diffusion direction


def  export_dti_md(self):
    full path to a nifti file containing the DTI mean diffusivity


def  export_dti_ga(self):
    full path to a nifti file containing the DTI geodesic anisotropy


def  export_dti_rd(self):
    full path to a nifti file containing the DTI radial diffusivity


def  export_dti_ad(self):
    full path to a nifti file containing the DTI axial diffusivity


def  export_dki_fa(self):
    full path to a nifti file containing the DKI fractional anisotropy


def  export_dki_md(self):
    full path to a nifti file containing the DKI mean diffusivity


def  export_dki_awf(self):
    full path to a nifti file containing the DKI axonal water fraction


def  export_dki_mk(self):
    full path to a nifti file containing the DKI mean kurtosis file


def  export_dki_ga(self):
    full path to a nifti file containing the DKI geodesic anisotropy


def  export_dki_rd(self):
    full path to a nifti file containing the DKI radial diffusivity


def  export_dki_ad(self):
    full path to a nifti file containing the DKI axial diffusivity


def  export_dki_rk(self):
    full path to a nifti file containing the DKI radial kurtosis


def  export_dki_ak(self):
    full path to a nifti file containing the DKI axial kurtosis file


def  export_brain_mask(self):
    full path to a nifti file containing the brain mask


def  export_bundle_dict(self):
    Dictionary defining the different bundles to be segmented


def  export_reg_template(self):
    a Nifti1Image containing the template for registration


def  export_b0_warped(self):
    full path to a nifti file containing b0 transformed to template space


def  export_template_xform(self):
    full path to a nifti file containing registration template transformed to subject space


def  export_rois(self):
    dictionary of full paths to Nifti1Image files of ROIs transformed to subject space


def  export_mapping(self):
    mapping from subject to template space.


def  export_reg_subject(self):
    Nifti1Image which represents this subject when registering the subject to the template


def  export_bundles(self):
    full path to a trk file containing containting segmented streamlines, labeled by bundle


def  export_clean_bundles(self):
    full path to a trk file containting segmented streamlines, cleaned using the Mahalanobis distance, and labeled by bundle


def  export_indiv_bundles(self):
    dictionary of paths, where each path is a full path to a trk file containing the streamlines of a given bundle, cleaned or uncleaned


def  export_sl_counts(self):
    full path to a JSON file containing streamline counts


def  export_profiles(self):
    full path to a CSV file containing tract profiles


def  export_scalar_dict(self):
    dicionary mapping scalar names to their respective file paths


def  export_seed(self):
    full path to a nifti file containing the tractography seed mask


def  export_stop(self):
    full path to a nifti file containing the tractography stop mask


def  export_streamlines(self):
    full path to the complete, unsegmented tractography file


def  export_all_bundles_figure(self):
    figure for the visualizaion of the recognized bundles in the subject's brain


def  export_indiv_bundles_figures(self):
    list of full paths to html or gif files containing visualizaions of individual bundles


def  export_tract_profile_plots(self):
    list of full paths to png files, where files contain plots of the tract profiles


def  export_viz_backend(self):
    An instance of the `AFQ.viz.utils.viz_backend` class.
