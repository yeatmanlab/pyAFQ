
.. _kwargs_docs:

The pyAFQ API optional arguments
--------------------------------
You can run pyAFQ on either a subject or participant level
using pyAFQ's API objects, :class:`AFQ.api.group.GroupAFQ`
and :class:`AFQ.api.participant.ParticipantAFQ`. Either way,
these classes take additional optional arguments. These arguments
give the user control over each step of the tractometry pipeline,
allowing customizaiton of tractography, bundle recognition, registration,
etc. Here are all of these arguments and their descriptions, organized
into 5 sections:


==========================================================
DATA
==========================================================
min_bval: float, optional
	Minimum b value you want to use
	from the dataset (other than b0), inclusive.
	If None, there is no minimum limit. Default: None

max_bval: float, optional
	Maximum b value you want to use
	from the dataset (other than b0), inclusive.
	If None, there is no maximum limit. Default: None

filter_b: bool, optional
	Whether to filter the DWI data based on min or max bvals.
	Default: True

b0_threshold: int, optional
	The value of b under which
	it is considered to be b0. Default: 50.

robust_tensor_fitting: bool, optional
	Whether to use robust_tensor_fitting when
	doing dti. Only applies to dti.
	Default: False

csd_response: tuple or None, optional.
	The response function to be used by CSD, as a tuple with two elements.
	The first is the eigen-values as an (3,) ndarray and the second is
	the signal value for the response function without diffusion-weighting
	(i.e. S0). If not provided, auto_response will be used to calculate
	these values.
	Default: None

csd_sh_order: int or None, optional.
	default: infer the number of parameters from the number of data
	volumes, but no larger than 8.
	Default: None

csd_lambda_: float, optional.
	weight given to the constrained-positivity regularization part of
	the deconvolution equation. Default: 1

csd_tau: float, optional.
	threshold controlling the amplitude below which the corresponding
	fODF is assumed to be zero.  Ideally, tau should be set to
	zero. However, to improve the stability of the algorithm, tau is
	set to tau*100 % of the mean fODF amplitude (here, 10% by default)
	(see [1]_). Default: 0.1

sphere: Sphere class instance, optional
	The sphere providing sample directions for the initial
	search of the maximal value of kurtosis.
	Default: 'repulsion100'

gtol: float, optional
	This input is to refine kurtosis maxima under the precision of
	the directions sampled on the sphere class instance.
	The gradient of the convergence procedure must be less than gtol
	before successful termination.
	If gtol is None, fiber direction is directly taken from the initial
	sampled directions of the given sphere object.
	Default: 1e-2

brain_mask_definition: instance from `AFQ.definitions.mask`, optional
	This will be used to create
	the brain mask, which gets applied before registration to a
	template.
	If you want no brain mask to be applied, use FullMask.
	If None, use B0Mask()
	Default: None

bundle_info: strings, dict, or BundleDict, optional
	List of bundle names to include in segmentation,
	or a bundle dictionary (see BundleDict for inspiration),
	or a BundleDict.
	If None, will get all appropriate bundles for the chosen
	segmentation algorithm.
	Default: None

reg_template_spec: str, or Nifti1Image, optional
	The target image data for registration.
	Can either be a Nifti1Image, a path to a Nifti1Image, or
	if "mni_T2", "dti_fa_template", "hcp_atlas", or "mni_T1",
	image data will be loaded automatically.
	If "hcp_atlas" is used, slr registration will be used
	and reg_subject should be "subject_sls".
	Default: "mni_T1"


==========================================================
MAPPING
==========================================================
mapping_definition: instance of `AFQ.definitions.mapping`, optional
	This defines how to either create a mapping from
	each subject space to template space or load a mapping from
	another software. If creating a map, will register reg_subject and
	reg_template.
	If None, use SynMap()
	Default: None

reg_subject_spec: str, instance of `AFQ.definitions.scalar`, optional  # noqa
	The source image data to be registered.
	Can either be a Nifti1Image, a scalar definition, or str.
	if "b0", "dti_fa_subject", "subject_sls", or "power_map,"
	image data will be loaded automatically.
	If "subject_sls" is used, slr registration will be used
	and reg_template should be "hcp_atlas".
	Default: "power_map"


==========================================================
SEGMENTATION
==========================================================
segmentation_params: dict, optional
	The parameters for segmentation.
	Default: use the default behavior of the seg.Segmentation object.

clean_params: dict, optional
	The parameters for cleaning.
	Default: use the default behavior of the seg.clean_bundle
	function.

profile_weights: str, 1D array, 2D array callable, optional
	How to weight each streamline (1D) or each node (2D)
	when calculating the tract-profiles. If callable, this is a
	function that calculates weights. If None, no weighting will
	be applied. If "gauss", gaussian weights will be used.
	If "median", the median of values at each node will be used
	instead of a mean or weighted mean.
	Default: "gauss"

scalars: strings and/or scalar definitions, optional
	List of scalars to use.
	Can be any of: "dti_fa", "dti_md", "dki_fa", "dki_md", "dki_awf",
	"dki_mk". Can also be a scalar from AFQ.definitions.scalar.
	Default: ["dti_fa", "dti_md"]


==========================================================
TRACTOGRAPHY
==========================================================
tracking_params: dict, optional
	The parameters for tracking. Default: use the default behavior of
	the aft.track function. Seed mask and seed threshold, if not
	specified, are replaced with scalar masks from scalar[0]
	thresholded to 0.2. The ``seed_mask`` and ``stop_mask`` items of
	this dict may be ``AFQ.definitions.mask.MaskFile`` instances.
	If ``tracker`` is set to "pft" then ``stop_mask`` should be
	an instance of ``AFQ.definitions.mask.PFTMask``.

import_tract: dict, optional
	BIDS filters for inputing a user made tractography file.
	If None, tractography will be performed automatically.
	Default: None


==========================================================
VIZ
==========================================================
sbv_lims_bundles: ndarray
	Of the form (lower bound, upper bound). Shading based on
	shade_by_volume will only differentiate values within these bounds.
	If lower bound is None, will default to 0.
	If upper bound is None, will default to the maximum value in
	shade_by_volume.
	Default: [None, None]

volume_opacity_bundles: float, optional
	Opacity of volume slices.
	Default: 0.3

n_points_bundles: int or None
	n_points to resample streamlines to before plotting. If None, no
	resampling is done.
	Default: 40

sbv_lims_indiv: ndarray
	Of the form (lower bound, upper bound). Shading based on
	shade_by_volume will only differentiate values within these bounds.
	If lower bound is None, will default to 0.
	If upper bound is None, will default to the maximum value in
	shade_by_volume.
	Default: [None, None]

volume_opacity_indiv: float, optional
	Opacity of volume slices.
	Default: 0.3

n_points_indiv: int or None
	n_points to resample streamlines to before plotting. If None, no
	resampling is done.
	Default: 40

viz_backend_spec: str, optional
	Which visualization backend to use.
	See Visualization Backends page in documentation for details:
	https://yeatmanlab.github.io/pyAFQ/usage/viz_backend.html
	One of {"fury", "plotly", "plotly_no_gif"}.
	Default: "plotly_no_gif"

virtual_frame_buffer: bool, optional
	Whether to use a virtual fram buffer. This is neccessary if
	generating GIFs in a headless environment. Default: False



The pyAFQ API methods
---------------------
After defining your pyAFQ API object, you can ask for the output of
any step of the pipeline. It is common for users to just call export_all
(for example, `myafq.export_all()`). However, if the user only wants the
tractography, the user can instead call `myafq.export_tractography()`. Here
is a list of all of pyAFQ's possible outputs:



def  export_data(self):
    DWI data as an ndarray for selected b values


def  export_gtab(self):
    A DIPY GradientTable with all the gradient information


def  export_img(self):
    unaltered DWI data in a Nifti1Image.


def  export_b0_file(self):
    full path to a nifti file containing the mean b0


def  export_masked_b0_file(self):
    full path to a nifti file containing the mean b0 after applying the brain mask


def  export_dti_tf(self):
    DTI TensorFit object


def  export_dti_params_file(self):
    full path to a nifti file containing parameters for the DTI fit


def  export_dki_tf(self):
    DKI DiffusionKurtosisFit object


def  export_dki_params_file(self):
    full path to a nifti file containing parameters for the DKI fit


def  export_csd_params_file(self):
    full path to a nifti file containing parameters for the CSD fit


def  export_pmap_file(self):
    full path to a nifti file containing the anisotropic power map


def  export_dti_fa_file(self):
    full path to a nifti file containing the DTI fractional anisotropy


def  export_dti_cfa_file(self):
    full path to a nifti file containing the DTI color fractional anisotropy


def  export_dti_pdd_file(self):
    full path to a nifti file containing the DTI principal diffusion direction


def  export_dti_md_file(self):
    full path to a nifti file containing the DTI mean diffusivity


def  export_dti_ga_file(self):
    full path to a nifti file containing the DTI geodesic anisotropy


def  export_dti_rd_file(self):
    full path to a nifti file containing the DTI radial diffusivity


def  export_dti_ad_file(self):
    full path to a nifti file containing the DTI axial diffusivity


def  export_dki_fa_file(self):
    full path to a nifti file containing the DKI fractional anisotropy


def  export_dki_md_file(self):
    full path to a nifti file containing the DKI mean diffusivity


def  export_dki_awf_file(self):
    full path to a nifti file containing the DKI axonal water fraction


def  export_dki_mk_file(self):
    full path to a nifti file containing the DKI mean kurtosis file


def  export_dki_ga_file(self):
    full path to a nifti file containing the DKI geodesic anisotropy


def  export_dki_rd_file(self):
    full path to a nifti file containing the DKI radial diffusivity


def  export_dki_ad_file(self):
    full path to a nifti file containing the DKI axial diffusivity


def  export_dki_rk_file(self):
    full path to a nifti file containing the DKI radial kurtosis


def  export_dki_ak_file(self):
    full path to a nifti file containing the DKI axial kurtosis file


def  export_brain_mask_file(self):
    full path to a nifti file containing the brain mask


def  export_bundle_dict(self):
    Dictionary defining the different bundles to be segmented


def  export_reg_template(self):
    a Nifti1Image containing the template for registration


def  export_b0_warped_file(self):
    full path to a nifti file containing b0 transformed to template space


def  export_template_xform_file(self):
    full path to a nifti file containing registration template transformed to subject space


def  export_rois_file(self):
    dictionary of full paths to Nifti1Image files of ROIs transformed to subject space


def  export_mapping(self):
    mapping from subject to template space.


def  export_reg_subject(self):
    Nifti1Image which represents this subject when registering the subject to the template


def  export_bundles_file(self):
    full path to a trk file containing containting segmented streamlines, labeled by bundle


def  export_clean_bundles_file(self):
    full path to a trk file containting segmented streamlines, cleaned using the Mahalanobis distance, and labeled by bundle


def  export_indiv_bundles(self):
    dictionary of paths, where each path is a full path to a trk file containing the streamlines of a given bundle, cleaned or uncleaned


def  export_sl_counts_file(self):
    full path to a JSON file containing streamline counts


def  export_profiles_file(self):
    full path to a CSV file containing tract profiles


def  export_scalar_dict(self):
    dicionary mapping scalar names to their respective file paths


def  export_seed_file(self):
    full path to a nifti file containing the tractography seed mask


def  export_stop_file(self):
    full path to a nifti file containing the tractography stop mask


def  export_streamlines_file(self):
    full path to the complete, unsegmented tractography file


def  export_all_bundles_figure(self):
    figure for the visualizaion of the recognized bundles in the subject's brain


def  export_indiv_bundles_figures(self):
    list of full paths to html or gif files containing visualizaions of individual bundles


def  export_tract_profile_plots(self):
    list of full paths to png files, where files contain plots of the tract profiles


def  export_viz_backend(self):
    An instance of the `AFQ.viz.utils.viz_backend` class.
