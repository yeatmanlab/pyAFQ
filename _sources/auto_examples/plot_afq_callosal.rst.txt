
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_afq_callosal.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_afq_callosal.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_afq_callosal.py:


==========================
Callosal bundles using AFQ API
==========================
An example using the AFQ API to find callosal bundles using the templates from:
http://hdl.handle.net/1773/34926

.. GENERATED FROM PYTHON SOURCE LINES 8-16

.. code-block:: default

    import os.path as op

    import plotly

    from AFQ import api
    from AFQ.definitions.mask import RoiMask
    import AFQ.data as afd








.. GENERATED FROM PYTHON SOURCE LINES 17-22

Get some example data
---------------------

Retrieves `Stanford HARDI dataset <https://purl.stanford.edu/ng782rw8378>`_.


.. GENERATED FROM PYTHON SOURCE LINES 22-25

.. code-block:: default


    afd.organize_stanford_data(clear_previous_afq=True)








.. GENERATED FROM PYTHON SOURCE LINES 26-33

Set tractography parameters (optional)
---------------------
We make this tracking_params which we will pass to the AFQ object
which specifies that we want 100,000 seeds randomly distributed
in the ROIs of every bundle.

We only do this to make this example faster and consume less space.

.. GENERATED FROM PYTHON SOURCE LINES 33-39

.. code-block:: default


    tracking_params = dict(seed_mask=RoiMask(),
                           n_seeds=10000,
                           random_seeds=True,
                           rng_seed=42)








.. GENERATED FROM PYTHON SOURCE LINES 40-48

Initialize an AFQ object:
-------------------------

We specify bundle_info as the callosal bundles only
(`api.CALLOSUM_BUNDLES`). If we want to segment both the callosum
and the other bundles, we would pass `api.CALLOSUM_BUNDLES + api.BUNDLES`
instead. This would tell the AFQ object to use bundles from both
the standard and callosal templates.

.. GENERATED FROM PYTHON SOURCE LINES 48-61

.. code-block:: default


    myafq = api.AFQ(bids_path=op.join(afd.afq_home,
                                      'stanford_hardi'),
                    preproc_pipeline='vistasoft',
                    bundle_info=api.CALLOSUM_BUNDLES,
                    tracking_params=tracking_params,
                    viz_backend='plotly_no_gif')

    # Calling export all produces all of the outputs of processing, including
    # tractography, scalar maps, tract profiles and visualizations:
    myafq.export_all()






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
      0%|          | 0/4966 [00:00<?, ?it/s]      0%|          | 1/4966 [00:00<13:41,  6.04it/s]      0%|          | 2/4966 [00:00<13:47,  6.00it/s]      0%|          | 4/4966 [00:06<2:52:34,  2.09s/it]      0%|          | 6/4966 [00:06<1:33:10,  1.13s/it]      5%|5         | 272/4966 [00:07<01:00, 77.61it/s]     16%|#5        | 784/4966 [00:07<00:15, 276.34it/s]     31%|###1      | 1552/4966 [00:07<00:05, 651.47it/s]     42%|####1     | 2064/4966 [00:07<00:03, 932.62it/s]     52%|#####1    | 2576/4966 [00:07<00:01, 1270.48it/s]     62%|######2   | 3088/4966 [00:07<00:01, 1621.48it/s]     72%|#######2  | 3600/4966 [00:07<00:00, 1992.53it/s]     83%|########2 | 4112/4966 [00:07<00:00, 2320.85it/s]     93%|#########3| 4624/4966 [00:08<00:00, 2201.02it/s]    100%|##########| 4966/4966 [00:08<00:00, 603.25it/s] 
      0%|          | 0/4966 [00:00<?, ?it/s]      0%|          | 8/4966 [00:00<01:10, 70.50it/s]     15%|#5        | 764/4966 [00:00<00:00, 4228.35it/s]     41%|####1     | 2044/4966 [00:00<00:00, 5722.94it/s]     82%|########2 | 4092/4966 [00:00<00:00, 7251.97it/s]    100%|##########| 4966/4966 [00:00<00:00, 7743.97it/s]
      0%|          | 0/4966 [00:00<?, ?it/s]      0%|          | 8/4966 [00:00<01:22, 60.08it/s]     10%|#         | 508/4966 [00:00<00:01, 2403.99it/s]     31%|###       | 1532/4966 [00:00<00:00, 4461.26it/s]     41%|####1     | 2044/4966 [00:00<00:00, 4237.27it/s]     51%|#####1    | 2556/4966 [00:00<00:00, 4239.88it/s]     62%|######1   | 3068/4966 [00:00<00:00, 4122.53it/s]     72%|#######2  | 3580/4966 [00:00<00:00, 4112.33it/s]     82%|########2 | 4092/4966 [00:01<00:00, 4296.92it/s]     93%|#########2| 4604/4966 [00:01<00:00, 4127.83it/s]    100%|##########| 4966/4966 [00:01<00:00, 4265.40it/s]
      0%|          | 0/4966 [00:00<?, ?it/s]     10%|#         | 508/4966 [00:00<00:00, 4605.45it/s]     31%|###       | 1532/4966 [00:00<00:00, 7642.07it/s]     46%|####6     | 2305/4966 [00:00<00:00, 5560.13it/s]     62%|######1   | 3068/4966 [00:00<00:00, 5121.35it/s]     82%|########2 | 4092/4966 [00:00<00:00, 5508.34it/s]    100%|##########| 4966/4966 [00:00<00:00, 6753.55it/s]
      0%|          | 0/4966 [00:00<?, ?it/s]      0%|          | 8/4966 [00:00<01:15, 65.70it/s]     10%|#         | 508/4966 [00:00<00:01, 2298.32it/s]     31%|###       | 1532/4966 [00:00<00:00, 4469.45it/s]     41%|####1     | 2044/4966 [00:00<00:00, 4344.01it/s]     62%|######1   | 3068/4966 [00:00<00:00, 5787.24it/s]     82%|########2 | 4092/4966 [00:00<00:00, 4858.84it/s]    100%|##########| 4966/4966 [00:00<00:00, 5446.99it/s]
      0%|          | 0/4966 [00:00<?, ?it/s]      4%|3         | 188/4966 [00:00<00:02, 1877.78it/s]     10%|#         | 508/4966 [00:00<00:01, 2509.62it/s]     21%|##        | 1020/4966 [00:00<00:01, 2627.40it/s]     31%|###       | 1532/4966 [00:00<00:01, 2689.58it/s]     41%|####1     | 2044/4966 [00:00<00:01, 2542.64it/s]     51%|#####1    | 2556/4966 [00:01<00:00, 2413.33it/s]     62%|######1   | 3068/4966 [00:01<00:00, 2374.27it/s]     72%|#######2  | 3580/4966 [00:01<00:00, 2409.49it/s]     82%|########2 | 4092/4966 [00:01<00:00, 2090.07it/s]     93%|#########2| 4604/4966 [00:01<00:00, 2161.25it/s]    100%|##########| 4966/4966 [00:01<00:00, 2488.56it/s]
      0%|          | 0/4966 [00:00<?, ?it/s]      0%|          | 8/4966 [00:00<01:11, 69.35it/s]     10%|#         | 508/4966 [00:00<00:01, 2661.95it/s]     31%|###       | 1532/4966 [00:00<00:00, 4761.47it/s]     41%|####1     | 2044/4966 [00:00<00:00, 4809.51it/s]     62%|######1   | 3068/4966 [00:00<00:00, 6165.23it/s]     82%|########2 | 4092/4966 [00:00<00:00, 5048.74it/s]    100%|##########| 4966/4966 [00:00<00:00, 5778.40it/s]
      0%|          | 0/4966 [00:00<?, ?it/s]      5%|5         | 252/4966 [00:00<00:01, 2506.41it/s]     21%|##        | 1020/4966 [00:00<00:00, 4184.46it/s]     41%|####1     | 2044/4966 [00:00<00:00, 3927.85it/s]     62%|######1   | 3068/4966 [00:00<00:00, 5335.02it/s]     82%|########2 | 4092/4966 [00:00<00:00, 4795.67it/s]    100%|##########| 4966/4966 [00:00<00:00, 5602.76it/s]
      0%|          | 0/8 [00:00<?, ?it/s]     12%|#2        | 1/8 [00:00<00:05,  1.21it/s]     25%|##5       | 2/8 [00:01<00:03,  1.87it/s]     38%|###7      | 3/8 [00:01<00:02,  2.29it/s]     50%|#####     | 4/8 [00:01<00:01,  2.53it/s]     62%|######2   | 5/8 [00:02<00:01,  2.67it/s]     75%|#######5  | 6/8 [00:02<00:00,  2.88it/s]     88%|########7 | 7/8 [00:02<00:00,  3.03it/s]    100%|##########| 8/8 [00:07<00:00,  1.66s/it]    100%|##########| 8/8 [00:07<00:00,  1.11it/s]
      0%|          | 0/8 [00:00<?, ?it/s]     12%|#2        | 1/8 [00:00<00:02,  3.31it/s]     25%|##5       | 2/8 [00:00<00:01,  3.43it/s]     38%|###7      | 3/8 [00:00<00:01,  3.54it/s]     50%|#####     | 4/8 [00:01<00:01,  3.49it/s]     62%|######2   | 5/8 [00:01<00:00,  3.57it/s]     75%|#######5  | 6/8 [00:01<00:00,  3.55it/s]     88%|########7 | 7/8 [00:01<00:00,  3.64it/s]    100%|##########| 8/8 [00:02<00:00,  3.66it/s]    100%|##########| 8/8 [00:02<00:00,  3.58it/s]




.. GENERATED FROM PYTHON SOURCE LINES 62-67

Visualizing bundles and tract profiles:
---------------------------------------
This would run the script and visualize the bundles using the plotly
interactive visualization, which should automatically open in a
new browser window.

.. GENERATED FROM PYTHON SOURCE LINES 67-69

.. code-block:: default

    bundle_html = myafq.all_bundles_figure
    plotly.io.show(bundle_html["01"])



.. raw:: html
    :file: images/sphx_glr_plot_afq_callosal_001.html






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 14 minutes  4.386 seconds)


.. _sphx_glr_download_auto_examples_plot_afq_callosal.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_afq_callosal.py <plot_afq_callosal.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_afq_callosal.ipynb <plot_afq_callosal.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
