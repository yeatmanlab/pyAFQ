
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_bids_layout.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_bids_layout.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_bids_layout.py:


====================
How pyAFQ uses BIDS
====================

The pyAFQ API relies heavily on the
`Brain Imaging Data Standard (BIDS) <https://bids-specification.readthedocs.io/en/stable/>`_. This means that the software assumes that its inputs are organized
according to the BIDS spec and its outputs conform where possible with the
BIDS spec.

.. note::

    Derivatives of processing diffusion MRI are not currently fully
    described in the existing BIDS specification, but describing these
    is part of an ongoing effort. Wherever possible, we conform with
    the draft implementation of the BIDS DWI derivatives available
    `here <https://bids-specification.readthedocs.io/en/wip-derivatives/05-derivatives/05-diffusion-derivatives.html>`_

In this example, we will explore the use of BIDS in pyAFQ and see
how BIDS allows us to extend and provide flexibility to the users
of the software.

.. GENERATED FROM PYTHON SOURCE LINES 24-35

.. code-block:: default


    import os
    import os.path as op

    import matplotlib.pyplot as plt
    import nibabel as nib

    from AFQ import api
    import AFQ.data as afd









.. GENERATED FROM PYTHON SOURCE LINES 36-38

To interact with and query BIDS datasets, we use
 `pyBIDS <https://bids-standard.github.io/pybids/>`_.

.. GENERATED FROM PYTHON SOURCE LINES 38-42

.. code-block:: default


    import bids









.. GENERATED FROM PYTHON SOURCE LINES 43-49

We start with some example data. The data we will use here is
generated from the
`Stanford HARDI dataset <https://purl.stanford.edu/ng782rw8378>`_.
The call below fetches
this dataset and organized it within the `~/AFQ_data` folder in the BIDS
format.

.. GENERATED FROM PYTHON SOURCE LINES 49-52

.. code-block:: default


    afd.organize_stanford_data(clear_previous_afq=True)








.. GENERATED FROM PYTHON SOURCE LINES 53-89

After doing that, we should have a folder that looks like this:

| stanford_hardi
| ├── dataset_description.json
| └── derivatives
|     ├── freesurfer
|     │   ├── dataset_description.json
|     │   └── sub-01
|     │       └── ses-01
|     │           └── anat
|     │               ├── sub-01_ses-01_T1w.nii.gz
|     │               └── sub-01_ses-01_seg.nii.gz
|     └── vistasoft
|         ├── dataset_description.json
|         └── sub-01
|             └── ses-01
|                 └── dwi
|                     ├── sub-01_ses-01_dwi.bvals
|                     ├── sub-01_ses-01_dwi.bvecs
|                     └── sub-01_ses-01_dwi.nii.gz

The top level directory is our overall bids dataset folder. In most
cases, this folder will include a `raw` folder that will contain the
raw data. In this case, we do not include the raw folder and only have
the pipelines that contains the outputs of preprocessing the data.
In general, only the preprocessed diffusion data is required.
See the "Organizing your data" section of "Using pyAFQ" for more details.
In this case, one folder containing Freesurfer derivatives and another
folder containing the DWI data that has been preprocessed with Vistasoft.
pyAFQ provides facilities to segment tractography results obtained
using other software. For example, we often use
`qsiprep <https://qsiprep.readthedocs.io/en/latest/>`_ to preprocess
our data and reconstruct tractographies with software such as
`MRTRIX <https://www.mrtrix.org/>`_. Here, we will demonstrate how to use
these reconstructions in the pyAFQ segmentation and tractometry pipeline
We fetch this data and add it as a separate pipeline

.. GENERATED FROM PYTHON SOURCE LINES 89-113

.. code-block:: default


    afd.fetch_stanford_hardi_tractography()

    bids_path = op.join(op.expanduser('~'), 'AFQ_data', 'stanford_hardi')
    tractography_path = op.join(bids_path, 'derivatives', 'my_tractography')
    sub_path = op.join(tractography_path, 'sub-01', 'ses-01', 'dwi')

    os.makedirs(sub_path, exist_ok=True)
    os.rename(
        op.join(
            op.expanduser('~'),
            'AFQ_data',
            'stanford_hardi_tractography',
            'full_segmented_cleaned_tractography.trk'),
        op.join(
            sub_path,
            'sub-01_ses-01-dwi_tractography.trk'))

    afd.to_bids_description(
        tractography_path,
        **{"Name": "my_tractography",
            "PipelineDescription": {"Name": "my_tractography"}})






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11337 [00:00<?, ? MB/s]      0%|          | 4/11337 [00:00<06:17, 30.01 MB/s]      0%|          | 10/11337 [00:00<04:54, 38.48 MB/s]      0%|          | 34/11337 [00:00<01:50, 102.30 MB/s]      1%|1         | 136/11337 [00:00<00:31, 359.19 MB/s]      4%|3         | 449/11337 [00:00<00:10, 1065.40 MB/s]      7%|7         | 802/11337 [00:00<00:06, 1583.07 MB/s]     10%|#         | 1169/11337 [00:00<00:05, 1947.71 MB/s]     14%|#3        | 1538/11337 [00:01<00:04, 2200.75 MB/s]     17%|#6        | 1900/11337 [00:01<00:04, 2352.42 MB/s]     20%|##        | 2277/11337 [00:01<00:03, 2485.40 MB/s]     23%|##3       | 2656/11337 [00:01<00:03, 2586.13 MB/s]     27%|##6       | 3033/11337 [00:01<00:03, 2652.29 MB/s]     30%|##9       | 3391/11337 [00:01<00:02, 2878.31 MB/s]     33%|###2      | 3685/11337 [00:01<00:02, 2722.29 MB/s]     35%|###4      | 3962/11337 [00:01<00:02, 2643.37 MB/s]     38%|###7      | 4305/11337 [00:02<00:02, 2849.51 MB/s]     41%|####      | 4595/11337 [00:02<00:02, 2705.88 MB/s]     43%|####2     | 4873/11337 [00:02<00:02, 2615.02 MB/s]     46%|####5     | 5215/11337 [00:02<00:02, 2831.75 MB/s]     49%|####8     | 5503/11337 [00:02<00:02, 2718.44 MB/s]     51%|#####1    | 5804/11337 [00:02<00:02, 2653.60 MB/s]     54%|#####4    | 6129/11337 [00:02<00:01, 2815.34 MB/s]     57%|#####6    | 6415/11337 [00:02<00:01, 2668.72 MB/s]     59%|#####9    | 6726/11337 [00:02<00:01, 2671.99 MB/s]     62%|######1   | 7011/11337 [00:03<00:01, 2333.29 MB/s]     65%|######5   | 7393/11337 [00:03<00:01, 2487.42 MB/s]     68%|######8   | 7755/11337 [00:03<00:01, 2548.70 MB/s]     71%|#######1  | 8101/11337 [00:03<00:01, 2547.56 MB/s]     75%|#######4  | 8458/11337 [00:03<00:01, 2578.37 MB/s]     78%|#######7  | 8823/11337 [00:03<00:00, 2617.22 MB/s]     81%|########1 | 9194/11337 [00:03<00:00, 2655.86 MB/s]     84%|########4 | 9567/11337 [00:04<00:00, 2685.96 MB/s]     88%|########7 | 9934/11337 [00:04<00:00, 2698.46 MB/s]     91%|######### | 10299/11337 [00:04<00:00, 2696.96 MB/s]     94%|#########4| 10659/11337 [00:04<00:00, 2679.97 MB/s]     97%|#########7| 11028/11337 [00:04<00:00, 2696.93 MB/s]    100%|##########| 11337/11337 [00:04<00:00, 2406.27 MB/s]
      0%|          | 0/14 [00:00<?, ? MB/s]     29%|##8       | 4/14 [00:00<00:00, 29.87 MB/s]    100%|##########| 14/14 [00:00<00:00, 69.05 MB/s]
      0%|          | 0/1037 [00:00<?, ? MB/s]      0%|          | 4/1037 [00:00<00:34, 30.14 MB/s]      1%|          | 10/1037 [00:00<00:26, 38.81 MB/s]      4%|3         | 38/1037 [00:00<00:08, 116.62 MB/s]     14%|#4        | 146/1037 [00:00<00:02, 388.27 MB/s]     46%|####5     | 477/1037 [00:00<00:00, 1138.13 MB/s]     82%|########2 | 851/1037 [00:00<00:00, 1701.30 MB/s]    100%|##########| 1037/1037 [00:00<00:00, 1265.25 MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 114-143

After we do that, our dataset folder should look like this:

| stanford_hardi
| ├── dataset_description.json
| └── derivatives
|     ├── freesurfer
|     │   ├── dataset_description.json
|     │   └── sub-01
|     │       └── ses-01
|     │           └── anat
|     │               ├── sub-01_ses-01_T1w.nii.gz
|     │               └── sub-01_ses-01_seg.nii.gz
|     ├── my_tractography
|     |   ├── dataset_description.json
|     │   └── sub-01
|     │       └── ses-01
|     │           └── dwi
|     │               └── sub-01_ses-01-dwi_tractography.trk
|     └── vistasoft
|         ├── dataset_description.json
|         └── sub-01
|             └── ses-01
|                 └── dwi
|                     ├── sub-01_ses-01_dwi.bvals
|                     ├── sub-01_ses-01_dwi.bvecs
|                     └── sub-01_ses-01_dwi.nii.gz

To explore the layout of these derivatives, we will initialize a
:class:`BIDSLayout` class instance to help us see what is in this dataset

.. GENERATED FROM PYTHON SOURCE LINES 143-146

.. code-block:: default


    layout = bids.BIDSLayout(bids_path, derivatives=True)








.. GENERATED FROM PYTHON SOURCE LINES 147-149

Because there is no raw data in this BIDS layout (only derivatives),
pybids will report that there are no subjects and sessions:

.. GENERATED FROM PYTHON SOURCE LINES 149-152

.. code-block:: default


    print(layout)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    BIDS Layout: ...runner/AFQ_data/stanford_hardi | Subjects: 0 | Sessions: 0 | Runs: 0




.. GENERATED FROM PYTHON SOURCE LINES 153-155

But a query on the derivatives will reveal the different derivatives that
are stored here:

.. GENERATED FROM PYTHON SOURCE LINES 155-158

.. code-block:: default


    print(layout.derivatives)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    {'freesurfer': BIDS Layout: ...d_hardi/derivatives/freesurfer | Subjects: 1 | Sessions: 1 | Runs: 0, 'vistasoft': BIDS Layout: ...rd_hardi/derivatives/vistasoft | Subjects: 1 | Sessions: 1 | Runs: 0, 'my_tractography': BIDS Layout: ...di/derivatives/my_tractography | Subjects: 1 | Sessions: 1 | Runs: 0}




.. GENERATED FROM PYTHON SOURCE LINES 159-162

We can use a :class:`bids.BIDSValidator` object to make sure that the
files within our data set are BIDS-compliant. For example, we can
extract the tractography derivatives part of our layout using:

.. GENERATED FROM PYTHON SOURCE LINES 162-165

.. code-block:: default


    my_tractography = layout.derivatives["my_tractography"]








.. GENERATED FROM PYTHON SOURCE LINES 166-170

This variable is also a BIDS layout object. This object has a ``get``
method, which allows us to query and find specific items within the
layout. For example, we can ask for files that have a suffix consistent
with tractography results:

.. GENERATED FROM PYTHON SOURCE LINES 170-173

.. code-block:: default


    tractography_files = my_tractography.get(suffix='tractography')








.. GENERATED FROM PYTHON SOURCE LINES 174-175

Or ask for files that have a ``.trk`` extension:

.. GENERATED FROM PYTHON SOURCE LINES 175-178

.. code-block:: default


    tractography_files = my_tractography.get(extension='.trk')








.. GENERATED FROM PYTHON SOURCE LINES 179-180

In this case, both of these would produce the same result.

.. GENERATED FROM PYTHON SOURCE LINES 180-184

.. code-block:: default


    tractography_file = tractography_files[0]
    print(tractography_file)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <BIDSFile filename='/home/runner/AFQ_data/stanford_hardi/derivatives/my_tractography/sub-01/ses-01/dwi/sub-01_ses-01-dwi_tractography.trk'>




.. GENERATED FROM PYTHON SOURCE LINES 185-186

We can also get some more structured information about this file:

.. GENERATED FROM PYTHON SOURCE LINES 186-190

.. code-block:: default


    print(tractography_file.get_entities())






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    {'datatype': 'dwi', 'extension': '.trk', 'session': '01', 'subject': '01', 'suffix': 'tractography'}




.. GENERATED FROM PYTHON SOURCE LINES 191-197

We can use a :class:`bids.BIDSValidator` class instance to validate that
this file is compliant with the specification. Note that the validator
requires that the filename be provided relative to the root of the BIDS
dataset, so we have to split the string that contains the full path
of the tractography to extract only the part that is relative to the
root of the entire BIDS ``layout`` object:

.. GENERATED FROM PYTHON SOURCE LINES 197-204

.. code-block:: default


    tractography_full_path = tractography_file.path
    tractography_relative_path = tractography_full_path.split(layout.root)[-1]

    validator = bids.BIDSValidator()
    print(validator.is_bids(tractography_relative_path))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    True




.. GENERATED FROM PYTHON SOURCE LINES 205-212

Next, we specify the information we need to define the bundles that we are
interested in segmenting. In this case, we are going to use a list of
bundle names for the bundle info. These names refer to bundles for
which we already have clear definitions of the information
needed to segment them (e.g., waypoint ROIs and probability maps).
For an example that includes custom definition of bundle info, see the
`plot_callosal_tract_profile example <http://yeatmanlab.github.io/pyAFQ/auto_examples/plot_callosal_tract_profile.html>`_.

.. GENERATED FROM PYTHON SOURCE LINES 212-215

.. code-block:: default


    bundle_info = ["SLF", "ARC", "CST", "FP"]








.. GENERATED FROM PYTHON SOURCE LINES 216-232

Now, we can define our AFQ object, pointing to the derivatives of the
`'my_tractography'` pipeline as inputs. This is done by setting the
`custom_tractography_bids_filters` key-word argument. We pass the
`bundle_info` defined above. We also point to the preprocessed
data that is in a `'dmriprep'` pipeline. Note that the pipeline name
is not necessarily the name of the folder it is in; the pipeline name is
defined in each pipeline's `dataset_description.json`. These data were
preprocessed with 'vistasoft', so this is the pipeline we'll point to
If we were using `'qsiprep'`, this is where we would pass that
string instead. If we did that, AFQ would look for a derivatives
folder called `'stanford_hardi/derivatives/qsiprep'` and find the
preprocessed DWI data within it. Finally, to speed things up
a bit, we also sub-sample the provided tractography. This is
done by defining the segmentation_params dictionary input.
To sub-sample to 10,000 streamlines, we define
`'nb_streamlines' = 10000`.

.. GENERATED FROM PYTHON SOURCE LINES 232-243

.. code-block:: default


    my_afq = api.AFQ(
        bids_path,
        preproc_pipeline='vistasoft',
        bundle_info=bundle_info,
        custom_tractography_bids_filters={
            "suffix": "tractography",
            "scope": "my_tractography"
        },
        segmentation_params={'nb_streamlines': 10000})








.. GENERATED FROM PYTHON SOURCE LINES 244-247

Finally, to run the segmentation and extract tract profiles, we call
The `export_all` method. This creates all of the derivative outputs of
AFQ within the 'stanford_hardi/derivatives/afq' folder.

.. GENERATED FROM PYTHON SOURCE LINES 247-251

.. code-block:: default


    my_afq.export_all()






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
      0%|          | 0/2840 [00:00<?, ?it/s]      0%|          | 1/2840 [00:00<10:27,  4.52it/s]      0%|          | 2/2840 [00:00<10:06,  4.68it/s]      0%|          | 4/2840 [00:07<1:52:40,  2.38s/it]      0%|          | 6/2840 [00:07<1:00:52,  1.29s/it]      7%|7         | 208/2840 [00:08<00:50, 52.07it/s]     19%|#8        | 528/2840 [00:08<00:14, 159.99it/s]     37%|###6      | 1040/2840 [00:08<00:04, 376.37it/s]     55%|#####4    | 1552/2840 [00:08<00:01, 651.46it/s]     73%|#######2  | 2064/2840 [00:08<00:00, 892.86it/s]     91%|######### | 2576/2840 [00:09<00:00, 1061.72it/s]    100%|##########| 2840/2840 [00:09<00:00, 313.01it/s] 
      0%|          | 0/1912 [00:00<?, ?it/s]      6%|6         | 124/1912 [00:00<00:01, 1181.27it/s]     27%|##6       | 508/1912 [00:00<00:00, 1821.61it/s]     53%|#####3    | 1020/1912 [00:00<00:00, 2267.35it/s]     80%|########  | 1532/1912 [00:00<00:00, 2839.93it/s]    100%|##########| 1912/1912 [00:00<00:00, 3141.38it/s]
      0%|          | 0/2375 [00:00<?, ?it/s]      8%|7         | 188/2375 [00:00<00:01, 1530.21it/s]     21%|##1       | 508/2375 [00:00<00:00, 2385.79it/s]     43%|####2     | 1020/2375 [00:00<00:00, 3040.32it/s]     65%|######4   | 1532/2375 [00:00<00:00, 3706.93it/s]     86%|########6 | 2044/2375 [00:00<00:00, 3058.13it/s]    100%|##########| 2375/2375 [00:00<00:00, 3484.18it/s]
      0%|          | 0/1845 [00:00<?, ?it/s]      7%|6         | 124/1845 [00:00<00:01, 1140.83it/s]     28%|##7       | 508/1845 [00:00<00:00, 2575.39it/s]     55%|#####5    | 1020/1845 [00:00<00:00, 3143.30it/s]    100%|##########| 1845/1845 [00:00<00:00, 4362.74it/s]
      0%|          | 0/1432 [00:00<?, ?it/s]     13%|#3        | 188/1432 [00:00<00:00, 1768.33it/s]     71%|#######1  | 1020/1432 [00:00<00:00, 4164.82it/s]    100%|##########| 1432/1432 [00:00<00:00, 5429.84it/s]
      0%|          | 0/1054 [00:00<?, ?it/s]     24%|##3       | 252/1054 [00:00<00:00, 2096.17it/s]     97%|#########6| 1020/1054 [00:00<00:00, 4263.28it/s]    100%|##########| 1054/1054 [00:00<00:00, 4086.55it/s]
      0%|          | 0/1137 [00:00<?, ?it/s]      1%|          | 8/1137 [00:00<00:20, 54.69it/s]     33%|###3      | 380/1137 [00:00<00:00, 1655.46it/s]     90%|########9 | 1020/1137 [00:00<00:00, 2675.42it/s]    100%|##########| 1137/1137 [00:00<00:00, 2522.17it/s]
      0%|          | 0/7 [00:00<?, ?it/s]     14%|#4        | 1/7 [00:00<00:01,  4.32it/s]     57%|#####7    | 4/7 [00:00<00:00, 11.97it/s]     86%|########5 | 6/7 [00:00<00:00, 14.38it/s]    100%|##########| 7/7 [00:00<00:00, 13.17it/s]
      0%|          | 0/7 [00:00<?, ?it/s]     43%|####2     | 3/7 [00:00<00:00, 18.30it/s]     86%|########5 | 6/7 [00:00<00:00, 20.04it/s]    100%|##########| 7/7 [00:00<00:00, 20.12it/s]




.. GENERATED FROM PYTHON SOURCE LINES 252-258

A few common issues that can hinder BIDS from working properly are:

1. Faulty `dataset_description.json` file. You need to make sure that the
   file contains the right names for the pipeline. See above for an example
   of that.
2. File naming convention doesn't uniquely identify file with bids filters.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 14 minutes  59.406 seconds)


.. _sphx_glr_download_auto_examples_plot_bids_layout.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_bids_layout.py <plot_bids_layout.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_bids_layout.ipynb <plot_bids_layout.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
