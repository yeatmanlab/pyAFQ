
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_optic_radiations.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_optic_radiations.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_optic_radiations.py:


=============================
Plotting the Optic Radiations
=============================

pyAFQ is designed to be customizable. This example shows how
you can customize it to define a new bundle based
on both waypoint ROIs of your design, as well as endpoint
ROIs of your design.

For now, this is a hypothetical example, as we do not yet
provide these ROIs as part of the software.

.. GENERATED FROM PYTHON SOURCE LINES 14-72




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2100.30 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2178.86 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2328.88 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2225.09 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2468.69 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]     16%|#5        | 3/19 [00:00<00:00, 17.20 MB/s]     63%|######3   | 12/19 [00:00<00:00, 37.24 MB/s]    100%|##########| 19/19 [00:00<00:00, 54.04 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]     21%|##1       | 4/19 [00:00<00:00, 22.54 MB/s]     53%|#####2    | 10/19 [00:00<00:00, 29.01 MB/s]    100%|##########| 19/19 [00:00<00:00, 42.66 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2328.88 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2124.77 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2305.83 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]     21%|##1       | 4/19 [00:00<00:00, 22.88 MB/s]     79%|#######8  | 15/19 [00:00<00:00, 46.30 MB/s]    100%|##########| 19/19 [00:00<00:00, 54.05 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]     21%|##1       | 4/19 [00:00<00:00, 22.87 MB/s]     84%|########4 | 16/19 [00:00<00:00, 49.74 MB/s]    100%|##########| 19/19 [00:00<00:00, 54.14 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2179.99 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2310.91 MB/s]
    Downloading https://templateflow.s3.amazonaws.com/tpl-MNI152NLin2009cAsym/tpl-MNI152NLin2009cAsym_res-01_T2w.nii.gz
      0%|          | 0.00/13.0k [00:00<?, ?B/s]      7%|6         | 873/13.0k [00:00<00:01, 8.73kB/s]     58%|#####7    | 7.48k/13.0k [00:00<00:00, 42.4kB/s]     91%|#########1| 11.8k/13.0k [00:00<00:00, 33.6kB/s]    13.0kB [00:00, 34.0kB/s]                            
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
      0%|          | 0/16874 [00:00<?, ?it/s]      0%|          | 4/16874 [00:04<5:27:26,  1.16s/it]      0%|          | 6/16874 [00:04<3:18:03,  1.42it/s]      1%|          | 142/16874 [00:04<04:58, 55.99it/s]      5%|4         | 782/16874 [00:05<00:47, 336.94it/s]      8%|7         | 1294/16874 [00:05<00:27, 575.20it/s]      9%|9         | 1550/16874 [00:05<00:23, 647.54it/s]     11%|#         | 1806/16874 [00:06<00:22, 664.10it/s]     14%|#3        | 2318/16874 [00:06<00:16, 870.81it/s]     15%|#5        | 2574/16874 [00:06<00:16, 851.73it/s]     18%|#8        | 3086/16874 [00:07<00:13, 1033.95it/s]     20%|#9        | 3342/16874 [00:07<00:12, 1109.21it/s]     21%|##1       | 3598/16874 [00:07<00:13, 986.38it/s]      24%|##4       | 4110/16874 [00:08<00:10, 1170.04it/s]     26%|##5       | 4366/16874 [00:08<00:11, 1063.07it/s]     29%|##8       | 4878/16874 [00:08<00:09, 1219.22it/s]     30%|###       | 5134/16874 [00:08<00:08, 1339.43it/s]     33%|###3      | 5646/16874 [00:09<00:06, 1633.53it/s]     35%|###4      | 5902/16874 [00:09<00:06, 1676.29it/s]     36%|###6      | 6158/16874 [00:09<00:06, 1783.47it/s]     38%|###8      | 6414/16874 [00:09<00:06, 1701.86it/s]     40%|###9      | 6670/16874 [00:09<00:06, 1627.90it/s]     43%|####2     | 7182/16874 [00:09<00:05, 1901.16it/s]     46%|####5     | 7694/16874 [00:10<00:04, 2075.38it/s]     47%|####7     | 7950/16874 [00:10<00:04, 2144.09it/s]     56%|#####6    | 9486/16874 [00:10<00:01, 4480.32it/s]     68%|######8   | 11534/16874 [00:10<00:00, 6861.93it/s]     80%|########  | 13582/16874 [00:10<00:00, 8534.89it/s]     93%|#########2| 15630/16874 [00:10<00:00, 7889.85it/s]    100%|##########| 16874/16874 [00:10<00:00, 1543.63it/s]
      0%|          | 0/16874 [00:00<?, ?it/s]      0%|          | 8/16874 [00:00<03:43, 75.56it/s]      6%|6         | 1020/16874 [00:00<00:03, 4942.84it/s]     12%|#2        | 2044/16874 [00:00<00:02, 6876.12it/s]     24%|##4       | 4092/16874 [00:00<00:01, 8903.37it/s]     36%|###6      | 6140/16874 [00:00<00:00, 11513.37it/s]     49%|####8     | 8188/16874 [00:00<00:00, 10264.31it/s]     61%|######    | 10236/16874 [00:01<00:00, 10067.97it/s]     73%|#######2  | 12284/16874 [00:01<00:00, 4673.70it/s]      85%|########4 | 14332/16874 [00:03<00:01, 2445.69it/s]     97%|#########7| 16380/16874 [00:05<00:00, 1875.32it/s]    100%|##########| 16874/16874 [00:05<00:00, 3200.64it/s]
      0%|          | 0/2 [00:00<?, ?it/s]     50%|#####     | 1/2 [00:00<00:00,  2.67it/s]    100%|##########| 2/2 [00:00<00:00,  3.98it/s]    100%|##########| 2/2 [00:00<00:00,  3.70it/s]
      0%|          | 0/2 [00:00<?, ?it/s]     50%|#####     | 1/2 [00:00<00:00,  5.55it/s]    100%|##########| 2/2 [00:00<00:00,  5.80it/s]    100%|##########| 2/2 [00:00<00:00,  5.75it/s]






|

.. code-block:: default


    import os.path as op
    from AFQ import api
    import AFQ.data as afd
    from AFQ.definitions.mask import LabelledMaskFile, RoiMask

    afd.organize_stanford_data(clear_previous_afq=True)

    or_rois = afd.read_or_templates()

    bundles = api.BundleDict({
        "L_OR": {
            "ROIs": [or_rois["left_OR_1"],
                     or_rois["left_OR_2"],
                     or_rois["left_OP_MNI"],
                     or_rois["left_TP_MNI"],
                     or_rois["left_pos_thal_MNI"]],
            "rules": [True, True, False, False, False],
            "cross_midline": False,
            "uid": 1
            },
        "R_OR": {
            "ROIs": [or_rois["right_OR_1"],
                     or_rois["right_OR_2"],
                     or_rois["right_OP_MNI"],
                     or_rois["right_TP_MNI"],
                     or_rois["right_pos_thal_MNI"]],
            "rules": [True, True, False, False, False],
            "cross_midline": False,
            "uid": 2
            }
        }
    )

    endpoint_info = {
        "L_OR": {
            "startpoint": or_rois['left_thal_MNI'],
            "endpoint": or_rois['left_V1_MNI']},
        "R_OR": {
            "startpoint": or_rois['right_thal_MNI'],
            "endpoint": or_rois['right_V1_MNI']}}

    brain_mask = LabelledMaskFile("seg",
                                  {"scope": "freesurfer"},
                                  exclusive_labels=[0])

    my_afq = api.AFQ(
        bids_path=op.join(afd.afq_home,
                         'stanford_hardi'),
        brain_mask=brain_mask,
        tracking_params={"n_seeds": 3,
                         "directions": "prob",
                         "odf_model": "CSD",
                         "seed_mask": RoiMask()},
        segmentation_params=dict(endpoint_info=endpoint_info),
        bundle_info=bundles)

    my_afq.export_all()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 16 minutes  28.738 seconds)


.. _sphx_glr_download_auto_examples_plot_optic_radiations.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_optic_radiations.py <plot_optic_radiations.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_optic_radiations.ipynb <plot_optic_radiations.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
