
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_optic_radiations.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_optic_radiations.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_optic_radiations.py:


=============================
Plotting the Optic Radiations
=============================

pyAFQ is designed to be customizable. This example shows how
you can customize it to define a new bundle based
on both waypoint ROIs of your design, as well as endpoint
ROIs of your design.

For now, this is a hypothetical example, as we do not yet
provide these ROIs as part of the software.

.. GENERATED FROM PYTHON SOURCE LINES 14-74




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2102.41 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2039.04 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2162.01 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2066.16 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2517.59 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]     16%|#5        | 3/19 [00:00<00:00, 21.33 MB/s]     47%|####7     | 9/19 [00:00<00:00, 33.83 MB/s]    100%|##########| 19/19 [00:00<00:00, 67.15 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]     21%|##1       | 4/19 [00:00<00:00, 28.41 MB/s]     58%|#####7    | 11/19 [00:00<00:00, 40.62 MB/s]    100%|##########| 19/19 [00:00<00:00, 66.69 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2115.13 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2113.00 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2228.64 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]     21%|##1       | 4/19 [00:00<00:00, 28.41 MB/s]     58%|#####7    | 11/19 [00:00<00:00, 40.77 MB/s]    100%|##########| 19/19 [00:00<00:00, 66.91 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]     16%|#5        | 3/19 [00:00<00:00, 20.87 MB/s]     58%|#####7    | 11/19 [00:00<00:00, 41.61 MB/s]    100%|##########| 19/19 [00:00<00:00, 65.75 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2190.24 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2197.12 MB/s]
    Downloading https://templateflow.s3.amazonaws.com/tpl-MNI152NLin2009cAsym/tpl-MNI152NLin2009cAsym_res-01_T2w.nii.gz
      0%|          | 0.00/13.0k [00:00<?, ?B/s]     32%|###1      | 4.13k/13.0k [00:00<00:00, 41.3kB/s]     77%|#######7  | 10.0k/13.0k [00:00<00:00, 51.6kB/s]    13.0kB [00:00, 46.8kB/s]                            
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
      0%|          | 0/16874 [00:00<?, ?it/s]      0%|          | 4/16874 [00:03<3:41:51,  1.27it/s]      0%|          | 14/16874 [00:03<50:41,  5.54it/s]       2%|1         | 268/16874 [00:03<01:49, 151.24it/s]      5%|4         | 780/16874 [00:03<00:38, 415.87it/s]      6%|6         | 1036/16874 [00:03<00:27, 581.66it/s]      8%|7         | 1292/16874 [00:04<00:21, 739.73it/s]      9%|9         | 1548/16874 [00:04<00:19, 781.16it/s]     11%|#         | 1804/16874 [00:04<00:19, 758.62it/s]     14%|#3        | 2316/16874 [00:05<00:15, 967.18it/s]     15%|#5        | 2572/16874 [00:05<00:15, 926.12it/s]     18%|#8        | 3084/16874 [00:05<00:12, 1130.68it/s]     20%|#9        | 3340/16874 [00:05<00:12, 1102.88it/s]     21%|##1       | 3596/16874 [00:06<00:13, 977.89it/s]      24%|##4       | 4108/16874 [00:06<00:10, 1195.50it/s]     26%|##5       | 4364/16874 [00:06<00:11, 1058.25it/s]     29%|##8       | 4876/16874 [00:07<00:09, 1225.23it/s]     32%|###1      | 5388/16874 [00:07<00:07, 1547.83it/s]     33%|###3      | 5644/16874 [00:07<00:06, 1608.56it/s]     35%|###4      | 5900/16874 [00:07<00:07, 1511.91it/s]     38%|###7      | 6412/16874 [00:08<00:06, 1606.12it/s]     41%|####1     | 6924/16874 [00:08<00:05, 1876.95it/s]     43%|####2     | 7180/16874 [00:08<00:05, 1925.05it/s]     46%|####5     | 7692/16874 [00:08<00:04, 2131.21it/s]     47%|####7     | 7948/16874 [00:08<00:04, 2129.53it/s]     55%|#####4    | 9228/16874 [00:08<00:01, 4036.48it/s]     67%|######6   | 11276/16874 [00:09<00:00, 6363.76it/s]     79%|#######8  | 13324/16874 [00:09<00:00, 8189.22it/s]     91%|#########1| 15372/16874 [00:09<00:00, 8261.94it/s]    100%|##########| 16874/16874 [00:09<00:00, 1788.06it/s]
      0%|          | 0/16874 [00:00<?, ?it/s]      0%|          | 60/16874 [00:00<00:29, 575.07it/s]      6%|6         | 1020/16874 [00:00<00:02, 5377.15it/s]     12%|#2        | 2044/16874 [00:00<00:02, 7213.28it/s]     24%|##4       | 4092/16874 [00:00<00:01, 9118.26it/s]     36%|###6      | 6140/16874 [00:00<00:00, 11529.28it/s]     49%|####8     | 8188/16874 [00:00<00:00, 10314.85it/s]     61%|######    | 10236/16874 [00:01<00:00, 9828.84it/s]     73%|#######2  | 12284/16874 [00:01<00:00, 4868.17it/s]     85%|########4 | 14332/16874 [00:03<00:01, 2462.12it/s]     97%|#########7| 16380/16874 [00:05<00:00, 1906.31it/s]    100%|##########| 16874/16874 [00:05<00:00, 3254.30it/s]
      0%|          | 0/2 [00:00<?, ?it/s]     50%|#####     | 1/2 [00:00<00:00,  2.54it/s]    100%|##########| 2/2 [00:00<00:00,  3.82it/s]    100%|##########| 2/2 [00:00<00:00,  3.55it/s]
      0%|          | 0/2 [00:00<?, ?it/s]     50%|#####     | 1/2 [00:00<00:00,  5.42it/s]    100%|##########| 2/2 [00:00<00:00,  5.65it/s]    100%|##########| 2/2 [00:00<00:00,  5.61it/s]






|

.. code-block:: default


    import os.path as op
    from AFQ.api.group import GroupAFQ
    import AFQ.api.bundle_dict as abd
    import AFQ.data as afd
    from AFQ.definitions.mask import LabelledMaskFile, RoiMask

    afd.organize_stanford_data(clear_previous_afq=True)

    or_rois = afd.read_or_templates()

    bundles = abd.BundleDict({
        "L_OR": {
            "ROIs": [or_rois["left_OR_1"],
                     or_rois["left_OR_2"],
                     or_rois["left_OP_MNI"],
                     or_rois["left_TP_MNI"],
                     or_rois["left_pos_thal_MNI"]],
            "rules": [True, True, False, False, False],
            "cross_midline": False,
            "uid": 1
        },
        "R_OR": {
            "ROIs": [or_rois["right_OR_1"],
                     or_rois["right_OR_2"],
                     or_rois["right_OP_MNI"],
                     or_rois["right_TP_MNI"],
                     or_rois["right_pos_thal_MNI"]],
            "rules": [True, True, False, False, False],
            "cross_midline": False,
            "uid": 2
        }
    })

    endpoint_info = {
        "L_OR": {
            "startpoint": or_rois['left_thal_MNI'],
            "endpoint": or_rois['left_V1_MNI']},
        "R_OR": {
            "startpoint": or_rois['right_thal_MNI'],
            "endpoint": or_rois['right_V1_MNI']}}

    brain_mask_definition = LabelledMaskFile(
        suffix="seg",
        filters={"scope": "freesurfer"},
        exclusive_labels=[0])

    my_afq = GroupAFQ(
        bids_path=op.join(
            afd.afq_home,
            'stanford_hardi'),
        brain_mask_definition=brain_mask_definition,
        tracking_params={"n_seeds": 3,
                         "directions": "prob",
                         "odf_model": "CSD",
                         "seed_mask": RoiMask()},
        segmentation_params=dict(endpoint_info=endpoint_info),
        bundle_info=bundles)

    my_afq.export_all()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 16 minutes  29.208 seconds)


.. _sphx_glr_download_auto_examples_plot_optic_radiations.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_optic_radiations.py <plot_optic_radiations.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_optic_radiations.ipynb <plot_optic_radiations.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
