
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_optic_radiations.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_optic_radiations.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_optic_radiations.py:


=============================
Plotting the Optic Radiations
=============================

pyAFQ is designed to be customizable. This example shows how
you can customize it to define a new bundle based
on both waypoint ROIs of your design, as well as endpoint
ROIs of your design.

For now, this is a hypothetical example, as we do not yet
provide these ROIs as part of the software.

.. GENERATED FROM PYTHON SOURCE LINES 14-72




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2847.46 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 3258.98 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2420.26 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 3342.07 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 3659.95 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]     16%|#5        | 3/19 [00:00<00:00, 21.35 MB/s]     58%|#####7    | 11/19 [00:00<00:00, 42.19 MB/s]    100%|##########| 19/19 [00:00<00:00, 67.22 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]     21%|##1       | 4/19 [00:00<00:00, 28.57 MB/s]     53%|#####2    | 10/19 [00:00<00:00, 36.75 MB/s]    100%|##########| 19/19 [00:00<00:00, 67.22 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2289.47 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2644.58 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 3813.00 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]     21%|##1       | 4/19 [00:00<00:00, 28.22 MB/s]     53%|#####2    | 10/19 [00:00<00:00, 36.57 MB/s]    100%|##########| 19/19 [00:00<00:00, 66.83 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]     21%|##1       | 4/19 [00:00<00:00, 27.77 MB/s]     74%|#######3  | 14/19 [00:00<00:00, 52.82 MB/s]    100%|##########| 19/19 [00:00<00:00, 66.24 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 3945.72 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 4346.43 MB/s]
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
      0%|          | 0/16959 [00:00<?, ?it/s]      0%|          | 4/16959 [00:03<4:29:41,  1.05it/s]      0%|          | 6/16959 [00:03<2:43:28,  1.73it/s]      1%|1         | 206/16959 [00:04<02:48, 99.19it/s]      5%|4         | 782/16959 [00:04<00:35, 458.03it/s]      6%|6         | 1038/16959 [00:04<00:25, 623.26it/s]     12%|#2        | 2062/16959 [00:04<00:11, 1281.92it/s]     15%|#5        | 2574/16959 [00:04<00:08, 1660.58it/s]     18%|#8        | 3086/16959 [00:04<00:07, 1792.77it/s]     21%|##1       | 3598/16959 [00:05<00:06, 1926.40it/s]     24%|##4       | 4110/16959 [00:05<00:06, 2082.55it/s]     27%|##7       | 4622/16959 [00:05<00:05, 2354.78it/s]     30%|###       | 5134/16959 [00:05<00:04, 2616.02it/s]     33%|###3      | 5646/16959 [00:05<00:04, 2778.28it/s]     36%|###6      | 6158/16959 [00:06<00:03, 2982.10it/s]     42%|####2     | 7182/16959 [00:06<00:02, 3498.58it/s]     45%|####5     | 7694/16959 [00:06<00:02, 3585.30it/s]     48%|####8     | 8206/16959 [00:06<00:02, 3700.49it/s]     54%|#####4    | 9230/16959 [00:06<00:01, 4522.91it/s]     63%|######3   | 10766/16959 [00:06<00:00, 6277.74it/s]     70%|######9   | 11790/16959 [00:06<00:00, 6648.82it/s]     76%|#######5  | 12814/16959 [00:07<00:00, 6728.40it/s]     82%|########1 | 13838/16959 [00:07<00:00, 6775.50it/s]     88%|########7 | 14862/16959 [00:07<00:00, 6942.51it/s]     94%|#########3| 15886/16959 [00:07<00:00, 7187.02it/s]    100%|#########9| 16910/16959 [00:07<00:00, 7403.61it/s]    100%|##########| 16959/16959 [00:07<00:00, 2220.84it/s]
      0%|          | 0/16959 [00:00<?, ?it/s]      5%|4         | 764/16959 [00:00<00:02, 6639.03it/s]     12%|#2        | 2044/16959 [00:00<00:02, 7136.17it/s]     24%|##4       | 4092/16959 [00:00<00:01, 7977.38it/s]     30%|###       | 5116/16959 [00:00<00:01, 7809.97it/s]     36%|###6      | 6140/16959 [00:00<00:01, 7806.87it/s]     42%|####2     | 7164/16959 [00:00<00:01, 7499.76it/s]     48%|####8     | 8188/16959 [00:01<00:01, 7258.29it/s]     54%|#####4    | 9212/16959 [00:01<00:01, 7221.15it/s]     60%|######    | 10236/16959 [00:01<00:01, 5785.68it/s]     66%|######6   | 11260/16959 [00:01<00:01, 4882.56it/s]     72%|#######2  | 12284/16959 [00:02<00:01, 4253.22it/s]     78%|#######8  | 13308/16959 [00:02<00:00, 3653.18it/s]     85%|########4 | 14332/16959 [00:02<00:00, 3352.67it/s]     91%|######### | 15356/16959 [00:03<00:00, 3385.71it/s]     97%|#########6| 16380/16959 [00:03<00:00, 3366.48it/s]    100%|##########| 16959/16959 [00:03<00:00, 4933.46it/s]






|

.. code-block:: default


    import os.path as op
    from AFQ import api
    import AFQ.data as afd
    from AFQ.definitions.mask import LabelledMaskFile, RoiMask

    afd.organize_stanford_data(clear_previous_afq=True)

    or_rois = afd.read_or_templates()

    bundles = api.BundleDict({
        "L_OR": {
            "ROIs": [or_rois["left_OR_1"],
                     or_rois["left_OR_2"],
                     or_rois["left_OP_MNI"],
                     or_rois["left_TP_MNI"],
                     or_rois["left_pos_thal_MNI"]],
            "rules": [True, True, False, False, False],
            "cross_midline": False,
            "uid": 1
            },
        "R_OR": {
            "ROIs": [or_rois["right_OR_1"],
                     or_rois["right_OR_2"],
                     or_rois["right_OP_MNI"],
                     or_rois["right_TP_MNI"],
                     or_rois["right_pos_thal_MNI"]],
            "rules": [True, True, False, False, False],
            "cross_midline": False,
            "uid": 2
            }
        }
    )

    endpoint_info = {
        "L_OR": {
            "startpoint": or_rois['left_thal_MNI'],
            "endpoint": or_rois['left_V1_MNI']},
        "R_OR": {
            "startpoint": or_rois['right_thal_MNI'],
            "endpoint": or_rois['right_V1_MNI']}}

    brain_mask = LabelledMaskFile("seg",
                                  {"scope": "freesurfer"},
                                  exclusive_labels=[0])

    my_afq = api.AFQ(
        bids_path=op.join(afd.afq_home,
                         'stanford_hardi'),
        brain_mask=brain_mask,
        tracking_params={"n_seeds": 3,
                         "directions": "prob",
                         "odf_model": "CSD",
                         "seed_mask": RoiMask()},
        segmentation_params=dict(endpoint_info=endpoint_info),
        bundle_info=bundles)

    my_afq.export_all()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 16 minutes  57.944 seconds)


.. _sphx_glr_download_auto_examples_plot_optic_radiations.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_optic_radiations.py <plot_optic_radiations.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_optic_radiations.ipynb <plot_optic_radiations.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
