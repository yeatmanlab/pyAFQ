
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_optic_radiations.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_optic_radiations.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_optic_radiations.py:


=============================
Plotting the Optic Radiations
=============================

pyAFQ is designed to be customizable. This example shows how
you can customize it to define a new bundle based
on both waypoint ROIs of your design, as well as endpoint
ROIs of your design.

For now, this is a hypothetical example, as we do not yet
provide these ROIs as part of the software.

.. GENERATED FROM PYTHON SOURCE LINES 14-72




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2455.68 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 1903.04 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2951.66 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2598.70 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 3004.52 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]      5%|5         | 1/19 [00:00<00:02,  7.47 MB/s]     21%|##1       | 4/19 [00:00<00:00, 16.14 MB/s]     32%|###1      | 6/19 [00:00<00:00, 15.56 MB/s]     58%|#####7    | 11/19 [00:00<00:00, 24.09 MB/s]    100%|##########| 19/19 [00:00<00:00, 35.22 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]      5%|5         | 1/19 [00:00<00:02,  7.47 MB/s]     21%|##1       | 4/19 [00:00<00:00, 16.24 MB/s]     32%|###1      | 6/19 [00:00<00:00, 15.60 MB/s]     58%|#####7    | 11/19 [00:00<00:00, 24.16 MB/s]    100%|##########| 19/19 [00:00<00:00, 35.32 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 1493.70 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2109.81 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2796.20 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]      5%|5         | 1/19 [00:00<00:02,  7.43 MB/s]     21%|##1       | 4/19 [00:00<00:00, 16.18 MB/s]     32%|###1      | 6/19 [00:00<00:00, 15.60 MB/s]     42%|####2     | 8/19 [00:00<00:00, 15.32 MB/s]     74%|#######3  | 14/19 [00:00<00:00, 25.90 MB/s]    100%|##########| 19/19 [00:00<00:00, 28.20 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]      5%|5         | 1/19 [00:00<00:02,  7.48 MB/s]     21%|##1       | 4/19 [00:00<00:00, 16.18 MB/s]     32%|###1      | 6/19 [00:00<00:00, 15.58 MB/s]     42%|####2     | 8/19 [00:00<00:00, 15.29 MB/s]     68%|######8   | 13/19 [00:00<00:00, 23.19 MB/s]    100%|##########| 19/19 [00:00<00:00, 28.21 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2549.73 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2669.83 MB/s]
    Downloading https://templateflow.s3.amazonaws.com/tpl-MNI152NLin2009cAsym/tpl-MNI152NLin2009cAsym_res-01_T2w.nii.gz
      0%|          | 0.00/13.0k [00:00<?, ?B/s]      0%|          | 34.0/13.0k [00:00<00:51, 254B/s]      1%|1         | 170/13.0k [00:00<00:18, 696B/s]       6%|5         | 748/13.0k [00:00<00:05, 2.32kB/s]     23%|##3       | 3.01k/13.0k [00:00<00:01, 7.94kB/s]     54%|#####4    | 7.06k/13.0k [00:00<00:00, 17.5kB/s]     71%|#######1  | 9.22k/13.0k [00:00<00:00, 18.4kB/s]    13.0kB [00:00, 15.6kB/s]                            
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
      0%|          | 0/16900 [00:00<?, ?it/s]      0%|          | 4/16900 [00:04<5:42:26,  1.22s/it]      0%|          | 6/16900 [00:04<3:27:11,  1.36it/s]      1%|          | 142/16900 [00:05<05:09, 54.11it/s]      5%|4         | 782/16900 [00:05<00:44, 364.61it/s]      6%|6         | 1038/16900 [00:05<00:34, 465.22it/s]      9%|9         | 1550/16900 [00:05<00:22, 692.31it/s]     11%|#         | 1806/16900 [00:06<00:20, 725.02it/s]     12%|#2        | 2062/16900 [00:06<00:17, 857.75it/s]     14%|#3        | 2318/16900 [00:06<00:17, 827.64it/s]     15%|#5        | 2574/16900 [00:06<00:16, 865.18it/s]     17%|#6        | 2830/16900 [00:07<00:13, 1049.28it/s]     18%|#8        | 3086/16900 [00:07<00:11, 1227.80it/s]     20%|#9        | 3342/16900 [00:07<00:12, 1101.38it/s]     21%|##1       | 3598/16900 [00:07<00:15, 844.52it/s]      24%|##4       | 4110/16900 [00:08<00:11, 1097.53it/s]     26%|##5       | 4366/16900 [00:08<00:12, 1036.18it/s]     29%|##8       | 4878/16900 [00:08<00:10, 1150.61it/s]     30%|###       | 5134/16900 [00:09<00:09, 1249.48it/s]     33%|###3      | 5646/16900 [00:09<00:06, 1624.02it/s]     35%|###4      | 5902/16900 [00:09<00:07, 1520.79it/s]     38%|###7      | 6414/16900 [00:09<00:06, 1644.54it/s]     39%|###9      | 6670/16900 [00:10<00:07, 1375.58it/s]     42%|####2     | 7182/16900 [00:10<00:06, 1607.04it/s]     46%|####5     | 7694/16900 [00:10<00:04, 1861.47it/s]     49%|####8     | 8206/16900 [00:10<00:03, 2279.09it/s]     62%|######2   | 10510/16900 [00:10<00:01, 5832.15it/s]     80%|########  | 13582/16900 [00:10<00:00, 9542.00it/s]     92%|#########2| 15630/16900 [00:11<00:00, 9653.71it/s]    100%|##########| 16900/16900 [00:11<00:00, 1528.05it/s]
      0%|          | 0/16900 [00:00<?, ?it/s]      0%|          | 8/16900 [00:00<03:47, 74.37it/s]      6%|6         | 1020/16900 [00:00<00:02, 5624.71it/s]     18%|#8        | 3068/16900 [00:00<00:01, 11161.73it/s]     36%|###6      | 6140/16900 [00:00<00:00, 13011.28it/s]     48%|####8     | 8188/16900 [00:00<00:00, 13793.08it/s]     61%|######    | 10236/16900 [00:00<00:00, 13342.55it/s]     73%|#######2  | 12284/16900 [00:01<00:00, 6046.82it/s]      85%|########4 | 14332/16900 [00:03<00:00, 2598.87it/s]     97%|#########6| 16380/16900 [00:04<00:00, 1937.98it/s]    100%|##########| 16900/16900 [00:04<00:00, 3420.67it/s]
      0%|          | 0/2 [00:00<?, ?it/s]     50%|#####     | 1/2 [00:00<00:00,  4.40it/s]    100%|##########| 2/2 [00:00<00:00,  4.47it/s]    100%|##########| 2/2 [00:00<00:00,  4.45it/s]
      0%|          | 0/2 [00:00<?, ?it/s]     50%|#####     | 1/2 [00:00<00:00,  4.10it/s]    100%|##########| 2/2 [00:00<00:00,  4.31it/s]    100%|##########| 2/2 [00:00<00:00,  4.28it/s]






|

.. code-block:: default


    import os.path as op
    from AFQ import api
    import AFQ.data as afd
    from AFQ.definitions.mask import LabelledMaskFile, RoiMask

    afd.organize_stanford_data(clear_previous_afq=True)

    or_rois = afd.read_or_templates()

    bundles = api.BundleDict({
        "L_OR": {
            "ROIs": [or_rois["left_OR_1"],
                     or_rois["left_OR_2"],
                     or_rois["left_OP_MNI"],
                     or_rois["left_TP_MNI"],
                     or_rois["left_pos_thal_MNI"]],
            "rules": [True, True, False, False, False],
            "cross_midline": False,
            "uid": 1
            },
        "R_OR": {
            "ROIs": [or_rois["right_OR_1"],
                     or_rois["right_OR_2"],
                     or_rois["right_OP_MNI"],
                     or_rois["right_TP_MNI"],
                     or_rois["right_pos_thal_MNI"]],
            "rules": [True, True, False, False, False],
            "cross_midline": False,
            "uid": 2
            }
        }
    )

    endpoint_info = {
        "L_OR": {
            "startpoint": or_rois['left_thal_MNI'],
            "endpoint": or_rois['left_V1_MNI']},
        "R_OR": {
            "startpoint": or_rois['right_thal_MNI'],
            "endpoint": or_rois['right_V1_MNI']}}

    brain_mask = LabelledMaskFile("seg",
                                  {"scope": "freesurfer"},
                                  exclusive_labels=[0])

    my_afq = api.AFQ(
        bids_path=op.join(afd.afq_home,
                         'stanford_hardi'),
        brain_mask=brain_mask,
        tracking_params={"n_seeds": 3,
                         "directions": "prob",
                         "odf_model": "CSD",
                         "seed_mask": RoiMask()},
        segmentation_params=dict(endpoint_info=endpoint_info),
        bundle_info=bundles)

    my_afq.export_all()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 17 minutes  33.231 seconds)


.. _sphx_glr_download_auto_examples_plot_optic_radiations.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_optic_radiations.py <plot_optic_radiations.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_optic_radiations.ipynb <plot_optic_radiations.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
