
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_optic_radiations.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_optic_radiations.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_optic_radiations.py:


=============================
Plotting the Optic Radiations
=============================

pyAFQ is designed to be customizable. This example shows how
you can customize it to define a new bundle based
on both waypoint ROIs of your design, as well as endpoint
ROIs of your design.

For now, this is a hypothetical example, as we do not yet
provide these ROIs as part of the software.

.. GENERATED FROM PYTHON SOURCE LINES 14-72




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 1582.16 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 1760.83 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 1802.45 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 1722.51 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2138.86 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]      5%|5         | 1/19 [00:00<00:02,  7.23 MB/s]     21%|##1       | 4/19 [00:00<00:00, 15.66 MB/s]     37%|###6      | 7/19 [00:00<00:00, 18.33 MB/s]     84%|########4 | 16/19 [00:00<00:00, 36.60 MB/s]    100%|##########| 19/19 [00:00<00:00, 34.05 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]      5%|5         | 1/19 [00:00<00:02,  7.09 MB/s]     21%|##1       | 4/19 [00:00<00:00, 15.37 MB/s]     32%|###1      | 6/19 [00:00<00:00, 14.76 MB/s]     63%|######3   | 12/19 [00:00<00:00, 25.62 MB/s]    100%|##########| 19/19 [00:00<00:00, 33.39 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2135.59 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 1954.48 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2073.31 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]      5%|5         | 1/19 [00:00<00:02,  6.99 MB/s]     21%|##1       | 4/19 [00:00<00:00, 15.14 MB/s]     32%|###1      | 6/19 [00:00<00:00, 14.57 MB/s]     53%|#####2    | 10/19 [00:00<00:00, 19.78 MB/s]    100%|##########| 19/19 [00:00<00:00, 32.91 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]     11%|#         | 2/19 [00:00<00:01, 14.57 MB/s]     21%|##1       | 4/19 [00:00<00:01, 14.49 MB/s]     32%|###1      | 6/19 [00:00<00:00, 14.46 MB/s]     63%|######3   | 12/19 [00:00<00:00, 25.86 MB/s]    100%|##########| 19/19 [00:00<00:00, 34.26 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 1760.83 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 1256.91 MB/s]
    Downloading https://templateflow.s3.amazonaws.com/tpl-MNI152NLin2009cAsym/tpl-MNI152NLin2009cAsym_res-01_T2w.nii.gz
      0%|          | 0.00/13.0k [00:00<?, ?B/s]      0%|          | 34.0/13.0k [00:00<00:48, 267B/s]      1%|1         | 170/13.0k [00:00<00:17, 733B/s]       6%|6         | 782/13.0k [00:00<00:04, 2.56kB/s]     25%|##4       | 3.20k/13.0k [00:00<00:01, 8.93kB/s]     56%|#####6    | 7.28k/13.0k [00:00<00:00, 17.1kB/s]     87%|########6 | 11.3k/13.0k [00:00<00:00, 23.6kB/s]    13.0kB [00:00, 16.1kB/s]                            
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
      0%|          | 0/16837 [00:00<?, ?it/s]      0%|          | 4/16837 [00:03<4:26:06,  1.05it/s]      0%|          | 6/16837 [00:03<2:42:06,  1.73it/s]      1%|          | 142/16837 [00:04<04:06, 67.77it/s]      3%|3         | 526/16837 [00:04<00:52, 309.57it/s]      5%|4         | 782/16837 [00:04<00:32, 487.87it/s]      6%|6         | 1038/16837 [00:04<00:24, 636.49it/s]      9%|9         | 1550/16837 [00:04<00:18, 841.36it/s]     11%|#         | 1806/16837 [00:05<00:18, 819.68it/s]     12%|#2        | 2062/16837 [00:05<00:15, 958.76it/s]     14%|#3        | 2318/16837 [00:05<00:15, 922.50it/s]     15%|#5        | 2574/16837 [00:05<00:15, 931.19it/s]     17%|#6        | 2830/16837 [00:06<00:12, 1118.78it/s]     18%|#8        | 3086/16837 [00:06<00:11, 1225.64it/s]     20%|#9        | 3342/16837 [00:06<00:12, 1064.99it/s]     21%|##1       | 3598/16837 [00:06<00:15, 871.38it/s]      24%|##4       | 4110/16837 [00:07<00:12, 1040.77it/s]     26%|##5       | 4366/16837 [00:07<00:11, 1090.51it/s]     27%|##7       | 4622/16837 [00:07<00:09, 1244.16it/s]     29%|##8       | 4878/16837 [00:07<00:10, 1157.11it/s]     30%|###       | 5134/16837 [00:08<00:09, 1210.19it/s]     34%|###3      | 5646/16837 [00:08<00:07, 1471.32it/s]     35%|###5      | 5902/16837 [00:08<00:07, 1534.42it/s]     37%|###6      | 6158/16837 [00:08<00:06, 1681.50it/s]     38%|###8      | 6414/16837 [00:08<00:06, 1540.06it/s]     40%|###9      | 6670/16837 [00:08<00:06, 1614.70it/s]     43%|####2     | 7182/16837 [00:09<00:05, 1719.43it/s]     46%|####5     | 7694/16837 [00:09<00:04, 1993.71it/s]     47%|####7     | 7950/16837 [00:09<00:04, 2076.38it/s]     55%|#####4    | 9230/16837 [00:09<00:01, 3859.81it/s]     67%|######6   | 11278/16837 [00:09<00:00, 6179.67it/s]     79%|#######9  | 13326/16837 [00:10<00:00, 7266.67it/s]     91%|#########1| 15374/16837 [00:10<00:00, 7145.35it/s]    100%|##########| 16837/16837 [00:10<00:00, 1619.20it/s]
      0%|          | 0/16837 [00:00<?, ?it/s]      0%|          | 12/16837 [00:00<02:20, 119.83it/s]      5%|4         | 764/16837 [00:00<00:03, 4145.24it/s]     12%|#2        | 2044/16837 [00:00<00:02, 5993.37it/s]     24%|##4       | 4092/16837 [00:00<00:01, 7671.78it/s]     30%|###       | 5116/16837 [00:00<00:01, 7298.69it/s]     36%|###6      | 6140/16837 [00:00<00:01, 7606.48it/s]     43%|####2     | 7164/16837 [00:01<00:01, 7502.37it/s]     49%|####8     | 8188/16837 [00:01<00:01, 6866.39it/s]     55%|#####4    | 9212/16837 [00:01<00:01, 6495.27it/s]     61%|######    | 10236/16837 [00:01<00:01, 3883.49it/s]     67%|######6   | 11260/16837 [00:02<00:01, 2969.41it/s]     73%|#######2  | 12284/16837 [00:03<00:02, 2097.85it/s]     79%|#######9  | 13308/16837 [00:03<00:01, 1882.08it/s]     85%|########5 | 14332/16837 [00:04<00:01, 1625.15it/s]     91%|#########1| 15356/16837 [00:05<00:00, 1528.74it/s]     97%|#########7| 16380/16837 [00:06<00:00, 1526.57it/s]    100%|##########| 16837/16837 [00:06<00:00, 2720.80it/s]
      0%|          | 0/2 [00:00<?, ?it/s]     50%|#####     | 1/2 [00:00<00:00,  4.68it/s]    100%|##########| 2/2 [00:00<00:00,  2.90it/s]    100%|##########| 2/2 [00:00<00:00,  3.07it/s]
      0%|          | 0/2 [00:00<?, ?it/s]     50%|#####     | 1/2 [00:00<00:00,  4.59it/s]    100%|##########| 2/2 [00:00<00:00,  4.68it/s]    100%|##########| 2/2 [00:00<00:00,  4.67it/s]






|

.. code-block:: default


    import os.path as op
    from AFQ import api
    import AFQ.data as afd
    from AFQ.definitions.mask import LabelledMaskFile, RoiMask

    afd.organize_stanford_data(clear_previous_afq=True)

    or_rois = afd.read_or_templates()

    bundles = api.BundleDict({
        "L_OR": {
            "ROIs": [or_rois["left_OR_1"],
                     or_rois["left_OR_2"],
                     or_rois["left_OP_MNI"],
                     or_rois["left_TP_MNI"],
                     or_rois["left_pos_thal_MNI"]],
            "rules": [True, True, False, False, False],
            "cross_midline": False,
            "uid": 1
            },
        "R_OR": {
            "ROIs": [or_rois["right_OR_1"],
                     or_rois["right_OR_2"],
                     or_rois["right_OP_MNI"],
                     or_rois["right_TP_MNI"],
                     or_rois["right_pos_thal_MNI"]],
            "rules": [True, True, False, False, False],
            "cross_midline": False,
            "uid": 2
            }
        }
    )

    endpoint_info = {
        "L_OR": {
            "startpoint": or_rois['left_thal_MNI'],
            "endpoint": or_rois['left_V1_MNI']},
        "R_OR": {
            "startpoint": or_rois['right_thal_MNI'],
            "endpoint": or_rois['right_V1_MNI']}}

    brain_mask = LabelledMaskFile("seg",
                                  {"scope": "freesurfer"},
                                  exclusive_labels=[0])

    my_afq = api.AFQ(
        bids_path=op.join(afd.afq_home,
                         'stanford_hardi'),
        brain_mask=brain_mask,
        tracking_params={"n_seeds": 3,
                         "directions": "prob",
                         "odf_model": "CSD",
                         "seed_mask": RoiMask()},
        segmentation_params=dict(endpoint_info=endpoint_info),
        bundle_info=bundles)

    my_afq.export_all()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 20 minutes  50.914 seconds)


.. _sphx_glr_download_auto_examples_plot_optic_radiations.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_optic_radiations.py <plot_optic_radiations.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_optic_radiations.ipynb <plot_optic_radiations.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
