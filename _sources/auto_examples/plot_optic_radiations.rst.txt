
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_optic_radiations.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_optic_radiations.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_optic_radiations.py:


=============================
Plotting the Optic Radiations
=============================

pyAFQ is designed to be customizable. This example shows how
you can customize it to define a new bundle based
on both waypoint ROIs of your design, as well as endpoint
ROIs of your design.

For now, this is a hypothetical example, as we do not yet
provide these ROIs as part of the software.

.. GENERATED FROM PYTHON SOURCE LINES 14-72




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 1885.08 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 1583.95 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2000.14 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2076.39 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2824.45 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]     21%|##1       | 4/19 [00:00<00:00, 30.23 MB/s]     74%|#######3  | 14/19 [00:00<00:00, 56.66 MB/s]    100%|##########| 19/19 [00:00<00:00, 71.24 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]     21%|##1       | 4/19 [00:00<00:00, 30.06 MB/s]     47%|####7     | 9/19 [00:00<00:00, 34.44 MB/s]    100%|##########| 19/19 [00:00<00:00, 70.97 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2487.72 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2585.88 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2690.38 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]     21%|##1       | 4/19 [00:00<00:00, 29.84 MB/s]     63%|######3   | 12/19 [00:00<00:00, 47.19 MB/s]    100%|##########| 19/19 [00:00<00:00, 70.17 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]     21%|##1       | 4/19 [00:00<00:00, 29.93 MB/s]     53%|#####2    | 10/19 [00:00<00:00, 38.48 MB/s]    100%|##########| 19/19 [00:00<00:00, 70.35 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 1793.97 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2857.16 MB/s]
    Downloading https://templateflow.s3.amazonaws.com/tpl-MNI152NLin2009cAsym/tpl-MNI152NLin2009cAsym_res-01_T2w.nii.gz
      0%|          | 0.00/13.0k [00:00<?, ?B/s]     25%|##4       | 3.21k/13.0k [00:00<00:00, 32.1kB/s]     60%|######    | 7.84k/13.0k [00:00<00:00, 40.4kB/s]     96%|#########6| 12.5k/13.0k [00:00<00:00, 43.1kB/s]    13.0kB [00:00, 41.5kB/s]                            
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
      0%|          | 0/16900 [00:00<?, ?it/s]      0%|          | 4/16900 [00:05<6:27:04,  1.37s/it]      0%|          | 6/16900 [00:05<3:53:10,  1.21it/s]      1%|          | 144/16900 [00:05<05:44, 48.68it/s]      5%|4         | 784/16900 [00:05<00:49, 323.76it/s]      6%|6         | 1040/16900 [00:06<00:37, 422.20it/s]      9%|9         | 1552/16900 [00:06<00:24, 637.64it/s]     11%|#         | 1808/16900 [00:06<00:22, 674.40it/s]     12%|#2        | 2064/16900 [00:07<00:18, 789.75it/s]     14%|#3        | 2320/16900 [00:07<00:18, 768.21it/s]     15%|#5        | 2576/16900 [00:07<00:17, 797.83it/s]     17%|#6        | 2832/16900 [00:07<00:15, 936.70it/s]     18%|#8        | 3088/16900 [00:08<00:12, 1083.01it/s]     20%|#9        | 3344/16900 [00:08<00:14, 959.68it/s]      21%|##1       | 3600/16900 [00:08<00:15, 836.02it/s]     24%|##4       | 4112/16900 [00:09<00:12, 1054.05it/s]     26%|##5       | 4368/16900 [00:09<00:12, 1035.02it/s]     27%|##7       | 4624/16900 [00:09<00:10, 1142.81it/s]     29%|##8       | 4880/16900 [00:09<00:10, 1170.77it/s]     30%|###       | 5136/16900 [00:09<00:10, 1157.60it/s]     33%|###3      | 5648/16900 [00:10<00:07, 1603.60it/s]     35%|###4      | 5904/16900 [00:10<00:07, 1537.75it/s]     36%|###6      | 6160/16900 [00:10<00:06, 1612.76it/s]     38%|###7      | 6416/16900 [00:10<00:07, 1485.41it/s]     39%|###9      | 6672/16900 [00:10<00:08, 1265.36it/s]     43%|####2     | 7184/16900 [00:11<00:06, 1522.02it/s]     46%|####5     | 7696/16900 [00:11<00:05, 1713.32it/s]     47%|####7     | 7952/16900 [00:11<00:04, 1799.97it/s]     52%|#####1    | 8720/16900 [00:11<00:03, 2592.36it/s]     58%|#####7    | 9744/16900 [00:11<00:01, 3628.45it/s]     70%|######9   | 11792/16900 [00:12<00:00, 5513.12it/s]     76%|#######5  | 12816/16900 [00:12<00:00, 5697.46it/s]     82%|########1 | 13840/16900 [00:12<00:00, 5869.26it/s]     88%|########7 | 14864/16900 [00:12<00:00, 6059.97it/s]     94%|#########4| 15888/16900 [00:12<00:00, 6493.23it/s]    100%|##########| 16900/16900 [00:12<00:00, 1329.61it/s]
      0%|          | 0/16900 [00:00<?, ?it/s]      0%|          | 8/16900 [00:00<03:46, 74.68it/s]      5%|4         | 764/16900 [00:00<00:04, 3915.31it/s]     12%|#2        | 2044/16900 [00:00<00:02, 6216.05it/s]     24%|##4       | 4092/16900 [00:00<00:01, 7540.63it/s]     30%|###       | 5116/16900 [00:00<00:01, 7158.63it/s]     36%|###6      | 6140/16900 [00:00<00:01, 7352.83it/s]     42%|####2     | 7164/16900 [00:01<00:01, 7335.39it/s]     48%|####8     | 8188/16900 [00:01<00:01, 6544.55it/s]     55%|#####4    | 9212/16900 [00:01<00:01, 6337.27it/s]     61%|######    | 10236/16900 [00:01<00:01, 4114.15it/s]     67%|######6   | 11260/16900 [00:02<00:01, 2891.13it/s]     73%|#######2  | 12284/16900 [00:03<00:02, 2017.62it/s]     79%|#######8  | 13308/16900 [00:04<00:02, 1696.15it/s]     85%|########4 | 14332/16900 [00:05<00:01, 1506.78it/s]     91%|######### | 15356/16900 [00:05<00:00, 1575.34it/s]     97%|#########6| 16380/16900 [00:06<00:00, 1469.14it/s]    100%|##########| 16900/16900 [00:06<00:00, 2638.59it/s]
      0%|          | 0/2 [00:00<?, ?it/s]     50%|#####     | 1/2 [00:00<00:00,  3.91it/s]    100%|##########| 2/2 [00:00<00:00,  4.09it/s]    100%|##########| 2/2 [00:00<00:00,  4.05it/s]
      0%|          | 0/2 [00:00<?, ?it/s]     50%|#####     | 1/2 [00:00<00:00,  3.77it/s]    100%|##########| 2/2 [00:00<00:00,  3.88it/s]    100%|##########| 2/2 [00:00<00:00,  3.86it/s]






|

.. code-block:: default


    import os.path as op
    from AFQ import api
    import AFQ.data as afd
    from AFQ.definitions.mask import LabelledMaskFile, RoiMask

    afd.organize_stanford_data(clear_previous_afq=True)

    or_rois = afd.read_or_templates()

    bundles = api.BundleDict({
        "L_OR": {
            "ROIs": [or_rois["left_OR_1"],
                     or_rois["left_OR_2"],
                     or_rois["left_OP_MNI"],
                     or_rois["left_TP_MNI"],
                     or_rois["left_pos_thal_MNI"]],
            "rules": [True, True, False, False, False],
            "cross_midline": False,
            "uid": 1
            },
        "R_OR": {
            "ROIs": [or_rois["right_OR_1"],
                     or_rois["right_OR_2"],
                     or_rois["right_OP_MNI"],
                     or_rois["right_TP_MNI"],
                     or_rois["right_pos_thal_MNI"]],
            "rules": [True, True, False, False, False],
            "cross_midline": False,
            "uid": 2
            }
        }
    )

    endpoint_info = {
        "L_OR": {
            "startpoint": or_rois['left_thal_MNI'],
            "endpoint": or_rois['left_V1_MNI']},
        "R_OR": {
            "startpoint": or_rois['right_thal_MNI'],
            "endpoint": or_rois['right_V1_MNI']}}

    brain_mask = LabelledMaskFile("seg",
                                  {"scope": "freesurfer"},
                                  exclusive_labels=[0])

    my_afq = api.AFQ(
        bids_path=op.join(afd.afq_home,
                         'stanford_hardi'),
        brain_mask=brain_mask,
        tracking_params={"n_seeds": 3,
                         "directions": "prob",
                         "odf_model": "CSD",
                         "seed_mask": RoiMask()},
        segmentation_params=dict(endpoint_info=endpoint_info),
        bundle_info=bundles)

    my_afq.export_all()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 17 minutes  6.478 seconds)


.. _sphx_glr_download_auto_examples_plot_optic_radiations.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_optic_radiations.py <plot_optic_radiations.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_optic_radiations.ipynb <plot_optic_radiations.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
