
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_optic_radiations.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_optic_radiations.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_optic_radiations.py:


=============================
Plotting the Optic Radiations
=============================

pyAFQ is designed to be customizable. This example shows how
you can customize it to define a new bundle based
on both waypoint ROIs of your design, as well as endpoint
ROIs of your design.

For now, this is a hypothetical example, as we do not yet
provide these ROIs as part of the software.

.. GENERATED FROM PYTHON SOURCE LINES 14-74




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 857.91 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2654.62 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 3021.83 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2396.75 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2532.79 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]     21%|##1       | 4/19 [00:00<00:00, 29.74 MB/s]     63%|######3   | 12/19 [00:00<00:00, 47.06 MB/s]    100%|##########| 19/19 [00:00<00:00, 70.14 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]     21%|##1       | 4/19 [00:00<00:00, 29.72 MB/s]     58%|#####7    | 11/19 [00:00<00:00, 42.68 MB/s]    100%|##########| 19/19 [00:00<00:00, 70.08 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 1923.99 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 3916.25 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 4350.94 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]     16%|#5        | 3/19 [00:00<00:00, 22.00 MB/s]     63%|######3   | 12/19 [00:00<00:00, 47.76 MB/s]    100%|##########| 19/19 [00:00<00:00, 69.31 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]     16%|#5        | 3/19 [00:00<00:00, 22.38 MB/s]     58%|#####7    | 11/19 [00:00<00:00, 44.09 MB/s]    100%|##########| 19/19 [00:00<00:00, 70.30 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 4025.24 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 4040.76 MB/s]
    Downloading https://templateflow.s3.amazonaws.com/tpl-MNI152NLin2009cAsym/tpl-MNI152NLin2009cAsym_res-01_T2w.nii.gz
      0%|          | 0.00/13.0k [00:00<?, ?B/s]     25%|##5       | 3.28k/13.0k [00:00<00:00, 32.8kB/s]     63%|######3   | 8.24k/13.0k [00:00<00:00, 42.7kB/s]    13.0kB [00:00, 44.6kB/s]                            
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
      0%|          | 0/16900 [00:00<?, ?it/s]      0%|          | 4/16900 [00:03<4:03:48,  1.16it/s]      0%|          | 18/16900 [00:03<42:18,  6.65it/s]       2%|2         | 396/16900 [00:03<01:19, 207.69it/s]      5%|4         | 780/16900 [00:03<00:36, 436.74it/s]      6%|6         | 1036/16900 [00:04<00:27, 582.53it/s]      8%|7         | 1292/16900 [00:04<00:23, 669.15it/s]      9%|9         | 1548/16900 [00:04<00:20, 751.51it/s]     11%|#         | 1804/16900 [00:04<00:16, 900.36it/s]     12%|#2        | 2060/16900 [00:04<00:14, 1025.39it/s]     14%|#3        | 2316/16900 [00:05<00:14, 1008.67it/s]     15%|#5        | 2572/16900 [00:05<00:13, 1063.59it/s]     18%|#8        | 3084/16900 [00:05<00:09, 1528.84it/s]     20%|#9        | 3340/16900 [00:05<00:09, 1457.34it/s]     21%|##1       | 3596/16900 [00:06<00:11, 1118.49it/s]     24%|##4       | 4108/16900 [00:06<00:09, 1344.51it/s]     26%|##5       | 4364/16900 [00:06<00:09, 1340.06it/s]     29%|##8       | 4876/16900 [00:06<00:07, 1530.47it/s]     30%|###       | 5132/16900 [00:07<00:07, 1527.49it/s]     33%|###3      | 5644/16900 [00:07<00:05, 1925.13it/s]     35%|###4      | 5900/16900 [00:07<00:06, 1810.77it/s]     38%|###7      | 6412/16900 [00:07<00:05, 1987.69it/s]     39%|###9      | 6668/16900 [00:07<00:05, 1876.79it/s]     42%|####2     | 7180/16900 [00:07<00:04, 2292.14it/s]     46%|####5     | 7692/16900 [00:08<00:03, 2376.67it/s]     49%|####8     | 8204/16900 [00:08<00:03, 2843.72it/s]     64%|######3   | 10764/16900 [00:08<00:00, 6906.28it/s]     88%|########7 | 14860/16900 [00:08<00:00, 11461.57it/s]    100%|##########| 16900/16900 [00:08<00:00, 1976.74it/s] 
      0%|          | 0/16900 [00:00<?, ?it/s]      1%|1         | 188/16900 [00:00<00:09, 1825.56it/s]     12%|#2        | 2044/16900 [00:00<00:01, 9866.05it/s]     24%|##4       | 4092/16900 [00:00<00:00, 13327.24it/s]     48%|####8     | 8188/16900 [00:00<00:00, 16728.58it/s]     61%|######    | 10236/16900 [00:00<00:00, 16254.55it/s]     73%|#######2  | 12284/16900 [00:01<00:00, 8092.06it/s]      85%|########4 | 14332/16900 [00:02<00:00, 3602.16it/s]     97%|#########6| 16380/16900 [00:03<00:00, 2615.36it/s]    100%|##########| 16900/16900 [00:03<00:00, 4453.50it/s]
      0%|          | 0/2 [00:00<?, ?it/s]     50%|#####     | 1/2 [00:00<00:00,  5.03it/s]    100%|##########| 2/2 [00:00<00:00,  5.09it/s]    100%|##########| 2/2 [00:00<00:00,  5.07it/s]
      0%|          | 0/2 [00:00<?, ?it/s]     50%|#####     | 1/2 [00:00<00:00,  4.48it/s]    100%|##########| 2/2 [00:00<00:00,  4.60it/s]    100%|##########| 2/2 [00:00<00:00,  4.57it/s]






|

.. code-block:: default


    import os.path as op
    from AFQ.api.group import GroupAFQ
    import AFQ.api.bundle_dict as abd
    import AFQ.data as afd
    from AFQ.definitions.mask import LabelledMaskFile, RoiMask

    afd.organize_stanford_data(clear_previous_afq=True)

    or_rois = afd.read_or_templates()

    bundles = abd.BundleDict({
        "L_OR": {
            "ROIs": [or_rois["left_OR_1"],
                     or_rois["left_OR_2"],
                     or_rois["left_OP_MNI"],
                     or_rois["left_TP_MNI"],
                     or_rois["left_pos_thal_MNI"]],
            "rules": [True, True, False, False, False],
            "cross_midline": False,
            "uid": 1
        },
        "R_OR": {
            "ROIs": [or_rois["right_OR_1"],
                     or_rois["right_OR_2"],
                     or_rois["right_OP_MNI"],
                     or_rois["right_TP_MNI"],
                     or_rois["right_pos_thal_MNI"]],
            "rules": [True, True, False, False, False],
            "cross_midline": False,
            "uid": 2
        }
    })

    endpoint_info = {
        "L_OR": {
            "startpoint": or_rois['left_thal_MNI'],
            "endpoint": or_rois['left_V1_MNI']},
        "R_OR": {
            "startpoint": or_rois['right_thal_MNI'],
            "endpoint": or_rois['right_V1_MNI']}}

    brain_mask_definition = LabelledMaskFile(
        suffix="seg",
        filters={"scope": "freesurfer"},
        exclusive_labels=[0])

    my_afq = GroupAFQ(
        bids_path=op.join(
            afd.afq_home,
            'stanford_hardi'),
        brain_mask_definition=brain_mask_definition,
        tracking_params={"n_seeds": 3,
                         "directions": "prob",
                         "odf_model": "CSD",
                         "seed_mask": RoiMask()},
        segmentation_params=dict(endpoint_info=endpoint_info),
        bundle_info=bundles)

    my_afq.export_all()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 14 minutes  54.244 seconds)


.. _sphx_glr_download_auto_examples_plot_optic_radiations.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_optic_radiations.py <plot_optic_radiations.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_optic_radiations.ipynb <plot_optic_radiations.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
