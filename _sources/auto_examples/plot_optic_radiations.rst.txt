
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_optic_radiations.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_optic_radiations.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_optic_radiations.py:


=============================
Plotting the Optic Radiations
=============================

pyAFQ is designed to be customizable. This example shows how
you can customize it to define a new bundle based
on both waypoint ROIs of your design, as well as endpoint
ROIs of your design.

For now, this is a hypothetical example, as we do not yet
provide these ROIs as part of the software.

.. GENERATED FROM PYTHON SOURCE LINES 14-72




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2013.59 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2531.26 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2137.77 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2300.77 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2663.05 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]     21%|##1       | 4/19 [00:00<00:00, 22.98 MB/s]     63%|######3   | 12/19 [00:00<00:00, 36.37 MB/s]    100%|##########| 19/19 [00:00<00:00, 54.24 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]     21%|##1       | 4/19 [00:00<00:00, 22.99 MB/s]     58%|#####7    | 11/19 [00:00<00:00, 33.00 MB/s]    100%|##########| 19/19 [00:00<00:00, 54.19 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2110.87 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2088.80 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2874.78 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]     16%|#5        | 3/19 [00:00<00:00, 16.92 MB/s]     47%|####7     | 9/19 [00:00<00:00, 26.78 MB/s]    100%|##########| 19/19 [00:00<00:00, 42.74 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]     16%|#5        | 3/19 [00:00<00:00, 16.95 MB/s]     63%|######3   | 12/19 [00:00<00:00, 36.80 MB/s]    100%|##########| 19/19 [00:00<00:00, 53.40 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2364.32 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2516.08 MB/s]
    Downloading https://templateflow.s3.amazonaws.com/tpl-MNI152NLin2009cAsym/tpl-MNI152NLin2009cAsym_res-01_T2w.nii.gz
      0%|          | 0.00/13.0k [00:00<?, ?B/s]     31%|###1      | 4.06k/13.0k [00:00<00:00, 40.6kB/s]     73%|#######3  | 9.49k/13.0k [00:00<00:00, 48.7kB/s]    13.0kB [00:00, 48.7kB/s]                            
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
      0%|          | 0/16854 [00:00<?, ?it/s]      0%|          | 4/16854 [00:04<5:07:24,  1.09s/it]      0%|          | 6/16854 [00:04<3:07:16,  1.50it/s]      1%|          | 142/16854 [00:04<04:41, 59.28it/s]      5%|4         | 782/16854 [00:04<00:41, 391.42it/s]      6%|6         | 1038/16854 [00:05<00:32, 487.96it/s]      9%|9         | 1550/16854 [00:05<00:22, 694.92it/s]     11%|#         | 1806/16854 [00:05<00:21, 689.71it/s]     14%|#3        | 2318/16854 [00:06<00:16, 860.66it/s]     15%|#5        | 2574/16854 [00:06<00:17, 828.12it/s]     17%|#6        | 2830/16854 [00:06<00:14, 948.09it/s]     18%|#8        | 3086/16854 [00:06<00:12, 1065.28it/s]     20%|#9        | 3342/16854 [00:07<00:13, 999.66it/s]      21%|##1       | 3598/16854 [00:07<00:15, 865.18it/s]     24%|##4       | 4110/16854 [00:07<00:11, 1079.86it/s]     26%|##5       | 4366/16854 [00:08<00:13, 959.81it/s]      29%|##8       | 4878/16854 [00:08<00:10, 1128.19it/s]     32%|###1      | 5390/16854 [00:08<00:08, 1424.23it/s]     33%|###3      | 5646/16854 [00:09<00:07, 1493.58it/s]     35%|###5      | 5902/16854 [00:09<00:07, 1411.40it/s]     37%|###6      | 6158/16854 [00:09<00:07, 1490.43it/s]     38%|###8      | 6414/16854 [00:09<00:07, 1406.58it/s]     41%|####1     | 6926/16854 [00:09<00:05, 1693.49it/s]     43%|####2     | 7182/16854 [00:09<00:05, 1817.41it/s]     44%|####4     | 7438/16854 [00:10<00:04, 1927.17it/s]     46%|####5     | 7694/16854 [00:10<00:04, 2034.34it/s]     47%|####7     | 7950/16854 [00:10<00:04, 1935.81it/s]     56%|#####6    | 9486/16854 [00:10<00:01, 4737.65it/s]     62%|######2   | 10510/16854 [00:10<00:01, 5837.57it/s]     68%|######8   | 11534/16854 [00:10<00:00, 6753.49it/s]     81%|########  | 13582/16854 [00:10<00:00, 8396.07it/s]     93%|#########2| 15630/16854 [00:11<00:00, 9044.24it/s]    100%|##########| 16854/16854 [00:11<00:00, 1516.63it/s]
      0%|          | 0/16854 [00:00<?, ?it/s]      0%|          | 8/16854 [00:00<03:50, 72.98it/s]      6%|6         | 1020/16854 [00:00<00:02, 5314.20it/s]     18%|#8        | 3068/16854 [00:00<00:01, 9650.83it/s]     24%|##4       | 4092/16854 [00:00<00:01, 9529.07it/s]     36%|###6      | 6140/16854 [00:00<00:00, 12591.25it/s]     49%|####8     | 8188/16854 [00:00<00:00, 12011.53it/s]     61%|######    | 10236/16854 [00:00<00:00, 11709.57it/s]     73%|#######2  | 12284/16854 [00:01<00:00, 5312.58it/s]      85%|########5 | 14332/16854 [00:03<00:01, 2365.72it/s]     97%|#########7| 16380/16854 [00:05<00:00, 1802.76it/s]    100%|##########| 16854/16854 [00:05<00:00, 3190.61it/s]
      0%|          | 0/2 [00:00<?, ?it/s]     50%|#####     | 1/2 [00:00<00:00,  3.85it/s]    100%|##########| 2/2 [00:00<00:00,  4.02it/s]    100%|##########| 2/2 [00:00<00:00,  3.99it/s]
      0%|          | 0/2 [00:00<?, ?it/s]     50%|#####     | 1/2 [00:00<00:00,  4.03it/s]    100%|##########| 2/2 [00:00<00:00,  4.00it/s]    100%|##########| 2/2 [00:00<00:00,  4.00it/s]






|

.. code-block:: default


    import os.path as op
    from AFQ import api
    import AFQ.data as afd
    from AFQ.definitions.mask import LabelledMaskFile, RoiMask

    afd.organize_stanford_data(clear_previous_afq=True)

    or_rois = afd.read_or_templates()

    bundles = api.BundleDict({
        "L_OR": {
            "ROIs": [or_rois["left_OR_1"],
                     or_rois["left_OR_2"],
                     or_rois["left_OP_MNI"],
                     or_rois["left_TP_MNI"],
                     or_rois["left_pos_thal_MNI"]],
            "rules": [True, True, False, False, False],
            "cross_midline": False,
            "uid": 1
            },
        "R_OR": {
            "ROIs": [or_rois["right_OR_1"],
                     or_rois["right_OR_2"],
                     or_rois["right_OP_MNI"],
                     or_rois["right_TP_MNI"],
                     or_rois["right_pos_thal_MNI"]],
            "rules": [True, True, False, False, False],
            "cross_midline": False,
            "uid": 2
            }
        }
    )

    endpoint_info = {
        "L_OR": {
            "startpoint": or_rois['left_thal_MNI'],
            "endpoint": or_rois['left_V1_MNI']},
        "R_OR": {
            "startpoint": or_rois['right_thal_MNI'],
            "endpoint": or_rois['right_V1_MNI']}}

    brain_mask = LabelledMaskFile("seg",
                                  {"scope": "freesurfer"},
                                  exclusive_labels=[0])

    my_afq = api.AFQ(
        bids_path=op.join(afd.afq_home,
                         'stanford_hardi'),
        brain_mask=brain_mask,
        tracking_params={"n_seeds": 3,
                         "directions": "prob",
                         "odf_model": "CSD",
                         "seed_mask": RoiMask()},
        segmentation_params=dict(endpoint_info=endpoint_info),
        bundle_info=bundles)

    my_afq.export_all()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 19 minutes  50.398 seconds)


.. _sphx_glr_download_auto_examples_plot_optic_radiations.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_optic_radiations.py <plot_optic_radiations.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_optic_radiations.ipynb <plot_optic_radiations.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
