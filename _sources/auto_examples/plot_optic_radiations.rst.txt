
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_optic_radiations.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_optic_radiations.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_optic_radiations.py:


=============================
Plotting the Optic Radiations
=============================

pyAFQ is designed to be customizable. This example shows how
you can customize it to define a new bundle based
on both waypoint ROIs of your design, as well as endpoint
ROIs of your design.

For now, this is a hypothetical example, as we do not yet
provide these ROIs as part of the software.

.. GENERATED FROM PYTHON SOURCE LINES 14-72




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2786.91 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2704.26 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2649.59 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2908.67 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 3050.40 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]     21%|##1       | 4/19 [00:00<00:00, 28.71 MB/s]     74%|#######3  | 14/19 [00:00<00:00, 53.89 MB/s]    100%|##########| 19/19 [00:00<00:00, 67.81 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]     21%|##1       | 4/19 [00:00<00:00, 28.64 MB/s]     47%|####7     | 9/19 [00:00<00:00, 32.66 MB/s]    100%|##########| 19/19 [00:00<00:00, 54.10 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2730.67 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2796.20 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 3034.95 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]     21%|##1       | 4/19 [00:00<00:00, 28.48 MB/s]     58%|#####7    | 11/19 [00:00<00:00, 40.89 MB/s]    100%|##########| 19/19 [00:00<00:00, 67.16 MB/s]
      0%|          | 0/19 [00:00<?, ? MB/s]     21%|##1       | 4/19 [00:00<00:00, 28.57 MB/s]     53%|#####2    | 10/19 [00:00<00:00, 36.82 MB/s]    100%|##########| 19/19 [00:00<00:00, 54.05 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2783.21 MB/s]
      0%|          | 0/1 [00:00<?, ? MB/s]    100%|##########| 1/1 [00:00<00:00, 2730.67 MB/s]
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
    Optimizing level 2 [max iter: 10000]
    Optimizing level 1 [max iter: 1000]
    Optimizing level 0 [max iter: 100]
      0%|          | 0/16900 [00:00<?, ?it/s]      0%|          | 4/16900 [00:03<3:59:28,  1.18it/s]      0%|          | 6/16900 [00:03<2:27:50,  1.90it/s]      5%|4         | 780/16900 [00:03<00:39, 405.79it/s]      9%|9         | 1548/16900 [00:03<00:16, 906.23it/s]     12%|#2        | 2060/16900 [00:04<00:12, 1142.26it/s]     18%|#8        | 3084/16900 [00:04<00:08, 1691.53it/s]     21%|##1       | 3596/16900 [00:04<00:07, 1893.49it/s]     24%|##4       | 4108/16900 [00:04<00:06, 2110.96it/s]     27%|##7       | 4620/16900 [00:04<00:05, 2423.03it/s]     30%|###       | 5132/16900 [00:04<00:04, 2705.02it/s]     36%|###6      | 6156/16900 [00:05<00:03, 3351.90it/s]     42%|####2     | 7180/16900 [00:05<00:02, 4089.67it/s]     52%|#####1    | 8716/16900 [00:05<00:01, 5223.96it/s]     70%|######9   | 11788/16900 [00:05<00:00, 9263.73it/s]     82%|########1 | 13836/16900 [00:05<00:00, 10034.38it/s]     94%|#########3| 15884/16900 [00:05<00:00, 11461.89it/s]    100%|##########| 16900/16900 [00:05<00:00, 2821.77it/s] 
      0%|          | 0/16900 [00:00<?, ?it/s]      9%|9         | 1532/16900 [00:00<00:01, 13632.23it/s]     24%|##4       | 4092/16900 [00:00<00:00, 13887.53it/s]     48%|####8     | 8188/16900 [00:00<00:00, 15846.83it/s]     61%|######    | 10236/16900 [00:00<00:00, 15659.96it/s]     73%|#######2  | 12284/16900 [00:00<00:00, 11517.75it/s]     85%|########4 | 14332/16900 [00:01<00:00, 6595.37it/s]      97%|#########6| 16380/16900 [00:02<00:00, 5221.33it/s]    100%|##########| 16900/16900 [00:02<00:00, 7866.35it/s]






|

.. code-block:: default


    import os.path as op
    from AFQ import api
    import AFQ.data as afd
    from AFQ.definitions.mask import LabelledMaskFile, RoiMask

    afd.organize_stanford_data(clear_previous_afq=True)

    or_rois = afd.read_or_templates()

    bundles = api.BundleDict({
        "L_OR": {
            "ROIs": [or_rois["left_OR_1"],
                     or_rois["left_OR_2"],
                     or_rois["left_OP_MNI"],
                     or_rois["left_TP_MNI"],
                     or_rois["left_pos_thal_MNI"]],
            "rules": [True, True, False, False, False],
            "cross_midline": False,
            "uid": 1
            },
        "R_OR": {
            "ROIs": [or_rois["right_OR_1"],
                     or_rois["right_OR_2"],
                     or_rois["right_OP_MNI"],
                     or_rois["right_TP_MNI"],
                     or_rois["right_pos_thal_MNI"]],
            "rules": [True, True, False, False, False],
            "cross_midline": False,
            "uid": 2
            }
        }
    )

    endpoint_info = {
        "L_OR": {
            "startpoint": or_rois['left_thal_MNI'],
            "endpoint": or_rois['left_V1_MNI']},
        "R_OR": {
            "startpoint": or_rois['right_thal_MNI'],
            "endpoint": or_rois['right_V1_MNI']}}

    brain_mask = LabelledMaskFile("seg",
                                  {"scope": "freesurfer"},
                                  exclusive_labels=[0])

    my_afq = api.AFQ(
        bids_path=op.join(afd.afq_home,
                         'stanford_hardi'),
        brain_mask=brain_mask,
        tracking_params={"n_seeds": 3,
                         "directions": "prob",
                         "odf_model": "CSD",
                         "seed_mask": RoiMask()},
        segmentation_params=dict(endpoint_info=endpoint_info),
        bundle_info=bundles)

    my_afq.export_all()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 15 minutes  52.745 seconds)


.. _sphx_glr_download_auto_examples_plot_optic_radiations.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_optic_radiations.py <plot_optic_radiations.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_optic_radiations.ipynb <plot_optic_radiations.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
