
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/tutorial_examples/plot_afq_reco80.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_tutorial_examples_plot_afq_reco80.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_tutorial_examples_plot_afq_reco80.py:


==========================
RecoBundles80 using AFQ API
==========================

An example using the AFQ API to run recobundles with the
`80 bundle atlas <https://figshare.com/articles/Advanced_Atlas_of_80_Bundles_in_MNI_space/7375883>`_.

.. GENERATED FROM PYTHON SOURCE LINES 10-17

.. code-block:: default

    import os.path as op

    import plotly

    from AFQ.api.group import GroupAFQ
    import AFQ.data.fetch as afd








.. GENERATED FROM PYTHON SOURCE LINES 18-23

Get some example data
---------------------

Retrieves `Stanford HARDI dataset <https://purl.stanford.edu/ng782rw8378>`_.


.. GENERATED FROM PYTHON SOURCE LINES 23-26

.. code-block:: default


    afd.organize_stanford_data(clear_previous_afq="track")








.. GENERATED FROM PYTHON SOURCE LINES 27-34

Set tractography parameters (optional)
---------------------
We make this tracking_params which we will pass to the GroupAFQ object
which specifies that we want 10,000 seeds randomly distributed
in the white matter.

We only do this to make this example faster and consume less space.

.. GENERATED FROM PYTHON SOURCE LINES 34-39

.. code-block:: default


    tracking_params = dict(n_seeds=10000,
                           random_seeds=True,
                           rng_seed=42)








.. GENERATED FROM PYTHON SOURCE LINES 40-46

Initialize a GroupAFQ object:
-------------------------

We specify seg_algo as reco80 in segmentation_params. This tells the AFQ
object to perform RecoBundles using the 80 bundles atlas in the
segmentation step.

.. GENERATED FROM PYTHON SOURCE LINES 46-53

.. code-block:: default


    myafq = GroupAFQ(bids_path=op.join(afd.afq_home,
                                       'stanford_hardi'),
                     preproc_pipeline='vistasoft',
                     segmentation_params={"seg_algo": "reco80"},
                     tracking_params=tracking_params)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/bids/layout/validation.py:122: UserWarning:

    The PipelineDescription field was superseded by GeneratedBy in BIDS 1.4.0. You can use ``pybids upgrade`` to update your derivative dataset.





.. GENERATED FROM PYTHON SOURCE LINES 54-59

Visualizing bundles and tract profiles:
---------------------------------------
This would run the script and visualize the bundles using the plotly
interactive visualization, which should automatically open in a
new browser window.

.. GENERATED FROM PYTHON SOURCE LINES 59-61

.. code-block:: default

    bundle_html = myafq.export("all_bundles_figure")
    plotly.io.show(bundle_html["01"][0])



.. raw:: html
    :file: images/sphx_glr_plot_afq_reco80_001.html






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (13 minutes 41.682 seconds)

**Estimated memory usage:**  3155 MB


.. _sphx_glr_download_tutorials_tutorial_examples_plot_afq_reco80.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_afq_reco80.py <plot_afq_reco80.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_afq_reco80.ipynb <plot_afq_reco80.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
