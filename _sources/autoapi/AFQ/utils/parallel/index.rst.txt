:mod:`AFQ.utils.parallel`
=========================

.. py:module:: AFQ.utils.parallel


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   AFQ.utils.parallel.parfor



.. function:: parfor(func, in_list, out_shape=None, n_jobs=-1, engine='joblib', backend='threading', func_args=[], func_kwargs={})

   Parallel for loop for numpy arrays


   :Parameters:

       **func** : callable
           The function to apply to each item in the array. Must have the form:
           func(arr, idx, *args, *kwargs) where arr is an ndarray and idx is an
           index into that array (a tuple). The Return of `func` needs to be one
           item (e.g. float, int) per input item.

       **in_list** : list
           All legitimate inputs to the function to operate over.

       **n_jobs** : integer, optional
           The number of jobs to perform in parallel. -1 to use all cpus.
           Default: 1

       **engine** : str
           {"dask", "joblib", "serial"}
           The last one is useful for debugging -- runs the code without any
           parallelization.

       **backend** : str
           What joblib or dask backend to use. Irrelevant for other engines.

       **func_args** : list, optional
           Positional arguments to `func`.

       **func_kwargs** : list, optional
           Keyword arguments to `func`.

   :Returns:

       ndarray of identical shape to `arr`
           ..













   ..
       !! processed by numpydoc !!


