:mod:`AFQ.api`
==============

.. py:module:: AFQ.api


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   AFQ.api.BundleDict
   AFQ.api.AFQ




.. class:: BundleDict(bundle_info=BUNDLES, seg_algo='afq', resample_to=False)


   Bases: :py:obj:`collections.abc.MutableMapping`

   .. method:: gen_all(self)


   .. method:: __setitem__(self, key, item)


   .. method:: __getitem__(self, key)


   .. method:: __len__(self)


   .. method:: __delitem__(self, key)


   .. method:: __iter__(self)


   .. method:: copy(self)



.. class:: AFQ(bids_path, bids_filters={'suffix': 'dwi'}, dmriprep='all', custom_tractography_bids_filters=None, b0_threshold=50, patch2self=False, robust_tensor_fitting=False, min_bval=None, max_bval=None, reg_template='mni_T1', reg_subject='power_map', brain_mask=B0Mask(), mapping=SynMap(), profile_weights='gauss', bundle_info=None, parallel_params={'engine': 'serial'}, scalars=['dti_fa', 'dti_md'], virtual_frame_buffer=False, viz_backend='plotly_no_gif', tracking_params=None, segmentation_params=None, clean_params=None, **kwargs)


   Bases: :py:obj:`object`

   ..
       !! processed by numpydoc !!

   .. method:: _get_best_scalar(self)


   .. method:: get_reg_template(self)


   .. method:: __getattribute__(self, attr)

      Return getattr(self, name).
















      ..
          !! processed by numpydoc !!


   .. method:: combine_profiles(self)


   .. method:: get_streamlines_json(self)


   .. method:: export_all(self, viz=True, afqbrowser=True, xforms=True, indiv=True)

      Exports all the possible outputs


      :Parameters:

          **viz** : bool
              Whether to output visualizations. This includes tract profile
              plots, a figure containing all bundles, and, if using the AFQ
              segmentation algorithm, individual bundle figures.
              Default: True

          **afqbrowser** : bool
              Whether to output an AFQ-Browser from this AFQ instance.
              Default: True

          **xforms** : bool
              Whether to output the reg_template image in subject space and,
              depending on if it is possible based on the mapping used, to
              output the b0 in template space.
              Default: True

          **indiv** : bool
              Whether to output individual bundles in their own files, in
              addition to the one file containing all bundles. If using
              the AFQ segmentation algorithm, individual ROIs are also
              output.
              Default: True














      ..
          !! processed by numpydoc !!


   .. method:: upload_to_s3(self, s3fs, remote_path)

      Upload entire AFQ derivatives folder to S3
















      ..
          !! processed by numpydoc !!


   .. method:: assemble_AFQ_browser(self, output_path=None, metadata=None, page_title='AFQ Browser', page_subtitle='', page_title_link='', page_subtitle_link='')

      Assembles an instance of the AFQ-Browser from this AFQ instance.
      First, we generate the combined tract profile if it is not already
      generated. This includes running the full AFQ pipeline if it has not
      already run. The combined tract profile is one of the outputs of
      export_all.
      Second, we generate a streamlines.json file from the bundle
      recognized in the first subject's first session.
      Third, we call AFQ-Browser's assemble to assemble an AFQ-Browser
      instance in output_path.


      :Parameters:

          **output_path** : str
              Path to location to create this instance of the browser in.
              Called "target" in AFQ Browser API. If None,
              bids_path/derivatives/afq_browser is used.
              Default: None

          **metadata** : str
              Path to subject metadata csv file. If None, an metadata file
              containing only subject ID is created. This file requires a
              "subjectID" column to work.
              Default: None

          **page_title** : str
              Page title. If None, prompt is sent to command line.
              Default: "AFQ Browser"

          **page_subtitle** : str
              Page subtitle. If None, prompt is sent to command line.
              Default: ""

          **page_title_link** : str
              Title hyperlink (including http(s)://).
              If None, prompt is sent to command line.
              Default: ""

          **page_subtitle_link** : str
              Subtitle hyperlink (including http(s)://).
              If None, prompt is sent to command line.
              Default: ""














      ..
          !! processed by numpydoc !!



