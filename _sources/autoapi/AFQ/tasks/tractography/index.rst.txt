:py:mod:`AFQ.tasks.tractography`
================================

.. py:module:: AFQ.tasks.tractography

.. autoapi-nested-parse::

   
   ..
       !! processed by numpydoc !!


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   AFQ.tasks.tractography.export_seed_mask
   AFQ.tasks.tractography.export_stop_mask
   AFQ.tasks.tractography.export_stop_mask_pft
   AFQ.tasks.tractography.streamlines
   AFQ.tasks.tractography.custom_tractography
   AFQ.tasks.tractography.get_tractography_plan



Attributes
~~~~~~~~~~

.. autoapisummary::

   AFQ.tasks.tractography.logger


.. py:data:: logger
   

   
















   ..
       !! processed by numpydoc !!

.. py:function:: export_seed_mask(tracking_params)

   
   full path to a nifti file containing the
   tractography seed mask
















   ..
       !! processed by numpydoc !!

.. py:function:: export_stop_mask(tracking_params)

   
   full path to a nifti file containing the
   tractography stop mask
















   ..
       !! processed by numpydoc !!

.. py:function:: export_stop_mask_pft(pve_wm, pve_gm, pve_csf)

   
   full path to a nifti file containing the
   tractography stop mask
















   ..
       !! processed by numpydoc !!

.. py:function:: streamlines(data_imap, seed, stop, tracking_params)

   
   full path to the complete, unsegmented tractography file


   :Parameters:

       **tracking_params** : dict, optional
           The parameters for tracking. Default: use the default behavior of
           the aft.track function. Seed mask and seed threshold, if not
           specified, are replaced with scalar masks from scalar[0]
           thresholded to 0.2. The ``seed_mask`` and ``stop_mask`` items of
           this dict may be ``AFQ.definitions.image.ImageFile`` instances.
           If ``tracker`` is set to "pft" then ``stop_mask`` should be
           an instance of ``AFQ.definitions.image.PFTImage``.














   ..
       !! processed by numpydoc !!

.. py:function:: custom_tractography(bids_info, import_tract=None)

   
   full path to the complete, unsegmented tractography file


   :Parameters:

       **import_tract** : dict, optional
           BIDS filters for inputing a user made tractography file.
           If None, tractography will be performed automatically.
           Default: None














   ..
       !! processed by numpydoc !!

.. py:function:: get_tractography_plan(kwargs)

   
















   ..
       !! processed by numpydoc !!

