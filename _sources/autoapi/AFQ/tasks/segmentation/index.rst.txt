:py:mod:`AFQ.tasks.segmentation`
================================

.. py:module:: AFQ.tasks.segmentation


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   AFQ.tasks.segmentation.segment
   AFQ.tasks.segmentation.clean_bundles
   AFQ.tasks.segmentation.export_bundles
   AFQ.tasks.segmentation.export_sl_counts
   AFQ.tasks.segmentation.export_bundle_lengths
   AFQ.tasks.segmentation.export_density_maps
   AFQ.tasks.segmentation.tract_profiles
   AFQ.tasks.segmentation.get_scalar_dict
   AFQ.tasks.segmentation.get_segmentation_plan



Attributes
~~~~~~~~~~

.. autoapisummary::

   AFQ.tasks.segmentation.logger


.. py:data:: logger

   

.. py:function:: segment(dwi, data_imap, mapping_imap, tractography_imap, segmentation_params)

   
   full path to a trk file containing containting
   segmented streamlines, labeled by bundle


   :Parameters:

       **segmentation_params** : dict, optional
           The parameters for segmentation.
           Default: use the default behavior of the seg.Segmentation object.














   ..
       !! processed by numpydoc !!

.. py:function:: clean_bundles(bundles, data_imap, clean_params=None)

   
   full path to a trk file containting segmented
   streamlines, cleaned using the Mahalanobis distance, and labeled by
   bundle


   :Parameters:

       **clean_params: dict, optional**
           The parameters for cleaning.
           Default: use the default behavior of the seg.clean_bundle
           function.














   ..
       !! processed by numpydoc !!

.. py:function:: export_bundles(base_fname, results_dir, clean_bundles, bundles, data_imap, tracking_params, segmentation_params)

   
   dictionary of paths, where each path is
   a full path to a trk file containing the streamlines of a given bundle,
   cleaned or uncleaned
















   ..
       !! processed by numpydoc !!

.. py:function:: export_sl_counts(data_imap, clean_bundles, bundles)

   
   full path to a JSON file containing streamline counts
















   ..
       !! processed by numpydoc !!

.. py:function:: export_bundle_lengths(data_imap, clean_bundles, bundles)

   
   full path to a JSON file containing median bundle lengths
















   ..
       !! processed by numpydoc !!

.. py:function:: export_density_maps(clean_bundles, dwi, data_imap)

   
   full path to 4d nifti file containing streamline counts per voxel
   per bundle, where the 4th dimension encodes the bundle
















   ..
       !! processed by numpydoc !!

.. py:function:: tract_profiles(clean_bundles, data_imap, scalar_dict, dwi_affine, profile_weights='gauss')

   
   full path to a CSV file containing tract profiles


   :Parameters:

       **profile_weights** : str, 1D array, 2D array callable, optional
           How to weight each streamline (1D) or each node (2D)
           when calculating the tract-profiles. If callable, this is a
           function that calculates weights. If None, no weighting will
           be applied. If "gauss", gaussian weights will be used.
           If "median", the median of values at each node will be used
           instead of a mean or weighted mean.
           Default: "gauss"














   ..
       !! processed by numpydoc !!

.. py:function:: get_scalar_dict(data_imap, mapping_imap, scalars=['dti_fa', 'dti_md'])

   
   dicionary mapping scalar names
   to their respective file paths


   :Parameters:

       **scalars** : list of strings and/or scalar definitions, optional
           List of scalars to use.
           Can be any of: "dti_fa", "dti_md", "dki_fa", "dki_md", "dki_awf",
           "dki_mk". Can also be a scalar from AFQ.definitions.image.
           Default: ["dti_fa", "dti_md"]














   ..
       !! processed by numpydoc !!

.. py:function:: get_segmentation_plan(kwargs)


