:mod:`AFQ.tasks.segmentation`
=============================

.. py:module:: AFQ.tasks.segmentation


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   AFQ.tasks.segmentation.segment
   AFQ.tasks.segmentation.clean_bundles
   AFQ.tasks.segmentation.export_bundles
   AFQ.tasks.segmentation.export_sl_counts
   AFQ.tasks.segmentation.tract_profiles
   AFQ.tasks.segmentation.get_scalar_dict
   AFQ.tasks.segmentation.get_segmentation_plan



Attributes
~~~~~~~~~~

.. autoapisummary::

   AFQ.tasks.segmentation.logger
   AFQ.tasks.segmentation.outputs


.. data:: logger
   

   

.. data:: outputs
   :annotation: = ['bundles_file', 'clean_bundles_file', 'indiv_bundles', 'sl_counts_file', 'profiles_file', 'scalar_dict']

   

.. function:: segment(subses_dict, bundle_dict, data_imap, reg_template, mapping_imap, tractography_imap, tracking_params, segmentation_params)


.. function:: clean_bundles(subses_dict, bundles_file, bundle_dict, clean_params, tracking_params, segmentation_params)


.. function:: export_bundles(subses_dict, clean_bundles_file, bundles_file, bundle_dict, tracking_params, segmentation_params)


.. function:: export_sl_counts(subses_dict, bundle_dict, clean_bundles_file, bundles_file, tracking_params, segmentation_params)


.. function:: tract_profiles(subses_dict, clean_bundles_file, bundle_dict, scalar_dict, profile_weights, dwi_affine, tracking_params, segmentation_params)


.. function:: get_scalar_dict(scalars, data_imap, mapping_imap)


.. function:: get_segmentation_plan()


