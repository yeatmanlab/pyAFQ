:py:mod:`AFQ.tasks.data`
========================

.. py:module:: AFQ.tasks.data

.. autoapi-nested-parse::

   
   ..
       !! processed by numpydoc !!


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   AFQ.tasks.data.get_data_gtab
   AFQ.tasks.data.b0
   AFQ.tasks.data.b0_mask
   AFQ.tasks.data.dti_fit
   AFQ.tasks.data.dti
   AFQ.tasks.data.dki_fit
   AFQ.tasks.data.dki
   AFQ.tasks.data.csd
   AFQ.tasks.data.anisotropic_power_map
   AFQ.tasks.data.dti_fa
   AFQ.tasks.data.dti_cfa
   AFQ.tasks.data.dti_pdd
   AFQ.tasks.data.dti_md
   AFQ.tasks.data.dti_ga
   AFQ.tasks.data.dti_rd
   AFQ.tasks.data.dti_ad
   AFQ.tasks.data.dki_fa
   AFQ.tasks.data.dki_md
   AFQ.tasks.data.dki_awf
   AFQ.tasks.data.dki_mk
   AFQ.tasks.data.dki_ga
   AFQ.tasks.data.dki_rd
   AFQ.tasks.data.dki_ad
   AFQ.tasks.data.dki_rk
   AFQ.tasks.data.dki_ak
   AFQ.tasks.data.brain_mask
   AFQ.tasks.data.get_bundle_dict
   AFQ.tasks.data.get_data_plan



Attributes
~~~~~~~~~~

.. autoapisummary::

   AFQ.tasks.data.DIPY_GH
   AFQ.tasks.data.dti_params
   AFQ.tasks.data.dki_params
   AFQ.tasks.data.csd_params


.. py:data:: DIPY_GH
   :annotation: = https://github.com/dipy/dipy/blob/master/dipy/

   
















   ..
       !! processed by numpydoc !!

.. py:function:: get_data_gtab(dwi, bval, bvec, min_bval=None, max_bval=None, filter_b=True, b0_threshold=50)

   
   DWI data as an ndarray for selected b values,
   A DIPY GradientTable with all the gradient information,
   and unaltered DWI data in a Nifti1Image.


   :Parameters:

       **min_bval** : float, optional
           Minimum b value you want to use
           from the dataset (other than b0), inclusive.
           If None, there is no minimum limit. Default: None

       **max_bval** : float, optional
           Maximum b value you want to use
           from the dataset (other than b0), inclusive.
           If None, there is no maximum limit. Default: None

       **filter_b** : bool, optional
           Whether to filter the DWI data based on min or max bvals.
           Default: True

       **b0_threshold** : int, optional
           The value of b under which
           it is considered to be b0. Default: 50.














   ..
       !! processed by numpydoc !!

.. py:function:: b0(dwi, data, gtab, img)

   
   full path to a nifti file containing the mean b0
















   ..
       !! processed by numpydoc !!

.. py:function:: b0_mask(base_fname, b0, brain_mask)

   
   full path to a nifti file containing the
   mean b0 after applying the brain mask
















   ..
       !! processed by numpydoc !!

.. py:function:: dti_fit(dti_params, gtab)

   
   DTI TensorFit object
















   ..
       !! processed by numpydoc !!

.. py:function:: dti(brain_mask, data, gtab, bval, bvec, b0_threshold=50, robust_tensor_fitting=False)

   
   full path to a nifti file containing parameters
   for the DTI fit


   :Parameters:

       **robust_tensor_fitting** : bool, optional
           Whether to use robust_tensor_fitting when
           doing dti. Only applies to dti.
           Default: False

       **b0_threshold** : int, optional
           The value of b under which
           it is considered to be b0. Default: 50.














   ..
       !! processed by numpydoc !!

.. py:data:: dti_params
   

   
















   ..
       !! processed by numpydoc !!

.. py:function:: dki_fit(dki_params, gtab)

   
   DKI DiffusionKurtosisFit object
















   ..
       !! processed by numpydoc !!

.. py:function:: dki(brain_mask, gtab, data)

   
   full path to a nifti file containing
   parameters for the DKI fit
















   ..
       !! processed by numpydoc !!

.. py:data:: dki_params
   

   
















   ..
       !! processed by numpydoc !!

.. py:function:: csd(dwi, brain_mask, gtab, data, csd_response=None, csd_sh_order=None, csd_lambda_=1, csd_tau=0.1)

   
   full path to a nifti file containing
   parameters for the CSD fit


   :Parameters:

       **csd_response** : tuple or None, optional.
           The response function to be used by CSD, as a tuple with two elements.
           The first is the eigen-values as an (3,) ndarray and the second is
           the signal value for the response function without diffusion-weighting
           (i.e. S0). If not provided, auto_response will be used to calculate
           these values.
           Default: None

       **csd_sh_order** : int or None, optional.
           default: infer the number of parameters from the number of data
           volumes, but no larger than 8.
           Default: None

       **csd_lambda_** : float, optional.
           weight given to the constrained-positivity regularization part of
           the deconvolution equation. Default: 1

       **csd_tau** : float, optional.
           threshold controlling the amplitude below which the corresponding
           fODF is assumed to be zero.  Ideally, tau should be set to
           zero. However, to improve the stability of the algorithm, tau is
           set to tau*100 percent of the mean fODF amplitude (here, 10 percent
           by default)
           (see [Rff3b1074f624-1]_). Default: 0.1










   .. rubric:: References

   .. [Rff3b1074f624-1] Tournier, J.D., et al. NeuroImage 2007. Robust determination of
           the fibre orientation distribution in diffusion MRI:
           Non-negativity constrained super-resolved spherical
           deconvolution

   .. only:: latex

      [Rff3b1074f624-1]_




   ..
       !! processed by numpydoc !!

.. py:data:: csd_params
   

   
















   ..
       !! processed by numpydoc !!

.. py:function:: anisotropic_power_map(csd_params)

   
   full path to a nifti file containing
   the anisotropic power map
















   ..
       !! processed by numpydoc !!

.. py:function:: dti_fa(dti_tf)

   
   full path to a nifti file containing
   the DTI fractional anisotropy
















   ..
       !! processed by numpydoc !!

.. py:function:: dti_cfa(dti_tf)

   
   full path to a nifti file containing
   the DTI color fractional anisotropy
















   ..
       !! processed by numpydoc !!

.. py:function:: dti_pdd(dti_tf)

   
   full path to a nifti file containing
   the DTI principal diffusion direction
















   ..
       !! processed by numpydoc !!

.. py:function:: dti_md(dti_tf)

   
   full path to a nifti file containing
   the DTI mean diffusivity
















   ..
       !! processed by numpydoc !!

.. py:function:: dti_ga(dti_tf)

   
   full path to a nifti file containing
   the DTI geodesic anisotropy
















   ..
       !! processed by numpydoc !!

.. py:function:: dti_rd(dti_tf)

   
   full path to a nifti file containing
   the DTI radial diffusivity
















   ..
       !! processed by numpydoc !!

.. py:function:: dti_ad(dti_tf)

   
   full path to a nifti file containing
   the DTI axial diffusivity
















   ..
       !! processed by numpydoc !!

.. py:function:: dki_fa(dki_tf)

   
   full path to a nifti file containing
   the DKI fractional anisotropy
















   ..
       !! processed by numpydoc !!

.. py:function:: dki_md(dki_tf)

   
   full path to a nifti file containing
   the DKI mean diffusivity
















   ..
       !! processed by numpydoc !!

.. py:function:: dki_awf(dki_params, sphere='repulsion100', gtol=0.01)

   
   full path to a nifti file containing
   the DKI axonal water fraction


   :Parameters:

       **sphere** : Sphere class instance, optional
           The sphere providing sample directions for the initial
           search of the maximal value of kurtosis.
           Default: 'repulsion100'

       **gtol** : float, optional
           This input is to refine kurtosis maxima under the precision of
           the directions sampled on the sphere class instance.
           The gradient of the convergence procedure must be less than gtol
           before successful termination.
           If gtol is None, fiber direction is directly taken from the initial
           sampled directions of the given sphere object.
           Default: 1e-2














   ..
       !! processed by numpydoc !!

.. py:function:: dki_mk(dki_tf)

   
   full path to a nifti file containing
   the DKI mean kurtosis file
















   ..
       !! processed by numpydoc !!

.. py:function:: dki_ga(dki_tf)

   
   full path to a nifti file containing
   the DKI geodesic anisotropy
















   ..
       !! processed by numpydoc !!

.. py:function:: dki_rd(dki_tf)

   
   full path to a nifti file containing
   the DKI radial diffusivity
















   ..
       !! processed by numpydoc !!

.. py:function:: dki_ad(dki_tf)

   
   full path to a nifti file containing
   the DKI axial diffusivity
















   ..
       !! processed by numpydoc !!

.. py:function:: dki_rk(dki_tf)

   
   full path to a nifti file containing
   the DKI radial kurtosis
















   ..
       !! processed by numpydoc !!

.. py:function:: dki_ak(dki_tf)

   
   full path to a nifti file containing
   the DKI axial kurtosis file
















   ..
       !! processed by numpydoc !!

.. py:function:: brain_mask(base_fname, dwi, b0, bids_info, brain_mask_definition=None)

   
   full path to a nifti file containing
   the brain mask


   :Parameters:

       **brain_mask_definition** : instance from `AFQ.definitions.image`, optional
           This will be used to create
           the brain mask, which gets applied before registration to a
           template.
           If you want no brain mask to be applied, use FullImage.
           If None, use B0Image()
           Default: None














   ..
       !! processed by numpydoc !!

.. py:function:: get_bundle_dict(base_fname, dwi, segmentation_params, brain_mask, bids_info, b0, bundle_info=None, reg_template_spec='mni_T1')

   
   Dictionary defining the different bundles to be segmented,
   and a Nifti1Image containing the template for registration


   :Parameters:

       **bundle_info** : list of strings, dict, or BundleDict, optional
           List of bundle names to include in segmentation,
           or a bundle dictionary (see BundleDict for inspiration),
           or a BundleDict. See `Defining Custom Bundle Dictionaries`
           in the `usage` section of pyAFQ's documentation for details.
           If None, will get all appropriate bundles for the chosen
           segmentation algorithm.
           Default: None

       **reg_template_spec** : str, or Nifti1Image, optional
           The target image data for registration.
           Can either be a Nifti1Image, a path to a Nifti1Image, or
           if "mni_T2", "dti_fa_template", "hcp_atlas", or "mni_T1",
           image data will be loaded automatically.
           If "hcp_atlas" is used, slr registration will be used
           and reg_subject should be "subject_sls".
           Default: "mni_T1"














   ..
       !! processed by numpydoc !!

.. py:function:: get_data_plan(kwargs)

   
















   ..
       !! processed by numpydoc !!

