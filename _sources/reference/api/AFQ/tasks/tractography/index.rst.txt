:py:mod:`AFQ.tasks.tractography`
================================

.. py:module:: AFQ.tasks.tractography


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   AFQ.tasks.tractography._meta_from_tracking_params
   AFQ.tasks.tractography.export_seed_mask
   AFQ.tasks.tractography.export_stop_mask
   AFQ.tasks.tractography.export_stop_mask_pft
   AFQ.tasks.tractography.streamlines
   AFQ.tasks.tractography.custom_tractography
   AFQ.tasks.tractography.gpu_tractography
   AFQ.tasks.tractography.get_tractography_plan
   AFQ.tasks.tractography._gen_seeds



Attributes
~~~~~~~~~~

.. autoapisummary::

   AFQ.tasks.tractography.has_ray
   AFQ.tasks.tractography.has_trx
   AFQ.tasks.tractography.has_gputrack
   AFQ.tasks.tractography.logger


.. py:data:: has_ray
   :value: True

   

.. py:data:: has_trx
   :value: True

   

.. py:data:: has_gputrack
   :value: True

   

.. py:data:: logger

   

.. py:function:: _meta_from_tracking_params(tracking_params, start_time, n_streamlines, seed, stop)


.. py:function:: export_seed_mask(data_imap, tracking_params)

   
   full path to a nifti file containing the
   tractography seed mask
















   ..
       !! processed by numpydoc !!

.. py:function:: export_stop_mask(data_imap, tracking_params)

   
   full path to a nifti file containing the
   tractography stop mask
















   ..
       !! processed by numpydoc !!

.. py:function:: export_stop_mask_pft(pve_wm, pve_gm, pve_csf)

   
   full path to a nifti file containing the
   tractography stop mask
















   ..
       !! processed by numpydoc !!

.. py:function:: streamlines(data_imap, seed, stop, tracking_params)

   
   full path to the complete, unsegmented tractography file


   :Parameters:

       **tracking_params** : dict, optional
           The parameters for tracking. Default: use the default behavior of
           the aft.track function. Seed mask and seed threshold, if not
           specified, are replaced with scalar masks from scalar[0]
           thresholded to 0.2. The ``seed_mask`` and ``stop_mask`` items of
           this dict may be ``AFQ.definitions.image.ImageFile`` instances.
           If ``tracker`` is set to "pft" then ``stop_mask`` should be
           an instance of ``AFQ.definitions.image.PFTImage``.














   ..
       !! processed by numpydoc !!

.. py:function:: custom_tractography(import_tract=None)

   
   full path to the complete, unsegmented tractography file


   :Parameters:

       **import_tract** : dict or str or None, optional
           BIDS filters for inputing a user made tractography file,
           or a path to the tractography file. If None, DIPY is used
           to generate the tractography.
           Default: None














   ..
       !! processed by numpydoc !!

.. py:function:: gpu_tractography(data_imap, tracking_params, seed, stop, tractography_ngpus=0, chunk_size=100000)

   
   full path to the complete, unsegmented tractography file


   :Parameters:

       **tractography_ngpus** : int, optional
           Number of GPUs to use in tractography. If non-0,
           this algorithm is used for tractography,
           https://github.com/dipy/GPUStreamlines
           Default: 0

       **chunk_size** : int, optional
           Chunk size for GPU tracking.
           Default: 100000














   ..
       !! processed by numpydoc !!

.. py:function:: get_tractography_plan(kwargs)


.. py:function:: _gen_seeds(n_seeds, params_file, seed_mask=None, seed_threshold=0, thresholds_as_percentages=False, random_seeds=False, rng_seed=None)


