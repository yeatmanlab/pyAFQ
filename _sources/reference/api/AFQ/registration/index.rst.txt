:py:mod:`AFQ.registration`
==========================

.. py:module:: AFQ.registration

.. autoapi-nested-parse::

   Registration tools

   ..
       !! processed by numpydoc !!


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   AFQ.registration.syn_register_dwi
   AFQ.registration.write_mapping
   AFQ.registration.read_mapping
   AFQ.registration.slr_registration



.. py:function:: syn_register_dwi(dwi, gtab, template=None, **syn_kwargs)

   
   Register DWI data to a template.


   :Parameters:

       **dwi** : nifti image or str
           Image containing DWI data, or full path to a nifti file with DWI.

       **gtab** : GradientTable or list of strings
           The gradients associated with the DWI data, or a string with [fbcal, ]

       **template** : nifti image or str, optional
           ..

       **syn_kwargs** : key-word arguments for :func:`syn_registration`
           ..

   :Returns:

       DiffeomorphicMap object
           ..













   ..
       !! processed by numpydoc !!

.. py:function:: write_mapping(mapping, fname)

   
   Write out a syn registration mapping to file


   :Parameters:

       **mapping** : a DiffeomorphicMap object derived from :func:`syn_registration`
           ..

       **fname** : str
           Full path to the nifti file storing the mapping














   ..
       !! processed by numpydoc !!

.. py:function:: read_mapping(disp, domain_img, codomain_img, prealign=None)

   
   Read a syn registration mapping from a nifti file


   :Parameters:

       **disp** : str, Nifti1Image, or ndarray
           If string, file must of an image or ndarray.
           If image, contains the mapping displacement field in each voxel
           Shape (x, y, z, 3, 2)
           If ndarray, contains affine transformation used for mapping

       **domain_img** : str or Nifti1Image
           ..

       **codomain_img** : str or Nifti1Image
           ..

   :Returns:

       **A** : class:`DiffeomorphicMap` object
           ..













   ..
       !! processed by numpydoc !!

.. py:function:: slr_registration(moving_data, static_data, moving_affine=None, static_affine=None, moving_shape=None, static_shape=None, **kwargs)

   
   Register a source image (moving) to a target image (static).


   :Parameters:

       **moving** : ndarray
           The source tractography data to be registered

       **moving_affine** : ndarray
           The affine associated with the moving (source) data.

       **moving_shape** : ndarray
           The shape of the space associated with the static (target) data.

       **static** : ndarray
           The target tractography data for registration

       **static_affine** : ndarray
           The affine associated with the static (target) data.

       **static_shape** : ndarray
           The shape of the space associated with the static (target) data.

       **\*\*kwargs:**
           kwargs are passed into whole_brain_slr

   :Returns:

       AffineMap
           ..













   ..
       !! processed by numpydoc !!

